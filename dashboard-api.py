#!/usr/bin/env python3
"""
–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è Dashboard API –¥–ª—è Open WebUI Hub
–û—Å–Ω–æ–≤–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è:
- –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –∏ —Å—Ç–∞—Ç—É—Å–æ–≤
- –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
- –£–º–µ–Ω—å—à–µ–Ω–∏–µ —á–∞—Å—Ç–æ—Ç—ã –æ–ø—Ä–æ—Å–∞
- –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è Docker API –∑–∞–ø—Ä–æ—Å–æ–≤
"""

import os
import sys
import json
import time
import threading
import subprocess
from datetime import datetime, timedelta
from functools import lru_cache
from typing import Dict, Any, Optional

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
def load_env_config():
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å .env —Ñ–∞–π–ª –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    env_file = os.path.join(os.path.dirname(__file__), '.env')
    if os.path.exists(env_file):
        with open(env_file, 'r') as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith('#') and '=' in line:
                    key, value = line.split('=', 1)
                    os.environ[key] = value
    return {
        'api_host': os.getenv('DASHBOARD_API_HOST', '0.0.0.0'),
        'api_port': int(os.getenv('DASHBOARD_API_PORT', 5002)),
        'debug_mode': os.getenv('DASHBOARD_DEBUG_MODE', 'false').lower() == 'true',
        'litellm_api_key': os.getenv('DASHBOARD_LITELLM_API_KEY', 'sk-1234567890abcdef'),
        'edgetts_api_key': os.getenv('DASHBOARD_EDGETTS_API_KEY', 'your_api_key_here'),
        'docker_compose_file': os.getenv('DASHBOARD_DOCKER_COMPOSE_FILE', 'compose.local.yml'),
        'health_check_timeout': int(os.getenv('DASHBOARD_HEALTH_CHECK_TIMEOUT', 5)),
        'docker_operation_timeout': int(os.getenv('DASHBOARD_DOCKER_OPERATION_TIMEOUT', 30)),
        'log_level': os.getenv('DASHBOARD_LOG_LEVEL', 'INFO'),
        'cache_cleanup_interval': int(os.getenv('DASHBOARD_CACHE_CLEANUP_INTERVAL', 300)),
    }

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
CONFIG = load_env_config()

import psutil
import requests
import docker
import docker.errors
from flask import Flask, jsonify, request
from flask_cors import CORS

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
PROJECT_ROOT = os.path.dirname(os.path.abspath(__file__))
ENV_DIR = os.path.join(PROJECT_ROOT, 'env')

app = Flask(__name__)
CORS(app)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
_cache = {}
_cache_timestamps = {}
_cache_lock = threading.Lock()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö) - —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
CACHE_DURATIONS = {
    'system': int(os.getenv('DASHBOARD_CACHE_SYSTEM_METRICS_TTL', 10)),
    'docker': int(os.getenv('DASHBOARD_CACHE_DOCKER_STATS_TTL', 15)),
    'service': int(os.getenv('DASHBOARD_CACHE_SERVICE_HEALTH_TTL', 30)),
    'container': int(os.getenv('DASHBOARD_CACHE_CONTAINER_RESOURCES_TTL', 20)),
    # –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
    'system_metrics': int(os.getenv('DASHBOARD_CACHE_SYSTEM_METRICS_TTL', 10)),
    'docker_stats': int(os.getenv('DASHBOARD_CACHE_DOCKER_STATS_TTL', 15)),
    'service_health': int(os.getenv('DASHBOARD_CACHE_SERVICE_HEALTH_TTL', 30)),
    'container_resources': int(os.getenv('DASHBOARD_CACHE_CONTAINER_RESOURCES_TTL', 20)),
    'service_status': int(os.getenv('DASHBOARD_CACHE_SERVICE_HEALTH_TTL', 15)),
}

# Docker –∫–ª–∏–µ–Ω—Ç
try:
    docker_client = docker.from_env()
except Exception:
    docker_client = None

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤ (–ø–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è –∏–∑ —Å—Ç–∞—Ä–æ–≥–æ API)
SERVICES = {
    'ollama': {
        'container_name': 'open-webui-hub-ollama-1',
        'port': 11435,
        'health_url': 'http://localhost:11435/api/version',
        'env_file': 'ollama.env',
        'config_files': [],
        'data_dir': 'data/ollama',
        'description': 'Ollama LLM Server',
        'category': 'ai'
    },
    'litellm': {
        'container_name': 'open-webui-hub-litellm-1',
        'port': 4000,
        'health_url': 'http://localhost:4000/v1/models',
        'auth_header': f'Bearer {CONFIG["litellm_api_key"]}',
        'env_file': 'litellm.env',
        'config_files': ['conf/litellm/litellm_config.yaml'],
        'data_dir': None,
        'description': 'LiteLLM Unified API Proxy',
        'category': 'ai'
    },
    'db': {
        'container_name': 'open-webui-hub-db-1',
        'port': 5432,
        'health_url': None,  # PostgreSQL –Ω–µ –∏–º–µ–µ—Ç HTTP health endpoint
        'env_file': 'db.env',
        'config_files': [],
        'data_dir': 'data/postgres',
        'description': 'PostgreSQL Database',
        'category': 'database'
    },
    'redis': {
        'container_name': 'open-webui-hub-redis-1',
        'port': 6379,
        'health_url': 'http://localhost:8001',
        'env_file': 'redis.env',
        'config_files': [],
        'data_dir': 'data/redis',
        'description': 'Redis Cache & Session Store',
        'category': 'database'
    },
    'openwebui': {
        'container_name': 'open-webui-hub-openwebui-1',
        'port': 3000,
        'health_url': 'http://localhost:3000',
        'env_file': 'openwebui.env',
        'config_files': [],
        'data_dir': 'data/openwebui',
        'description': 'Open WebUI Interface',
        'category': 'frontend'
    },
    'searxng': {
        'container_name': 'open-webui-hub-searxng-1',
        'port': 8080,
        'health_url': 'http://localhost:8080',
        'env_file': 'searxng.env',
        'config_files': ['conf/searxng/settings.yml', 'conf/searxng/uwsgi.ini'],
        'data_dir': None,
        'description': 'SearXNG Search Engine',
        'category': 'search'
    },
    'nginx': {
        'container_name': 'open-webui-hub-nginx-1',
        'port': 80,
        'health_url': 'http://localhost',
        'env_file': None,
        'config_files': ['conf/nginx/nginx.conf', 'conf/nginx/conf.d/default.conf'],
        'data_dir': None,
        'description': 'Nginx Reverse Proxy',
        'category': 'proxy'
    },
    'watchtower': {
        'container_name': 'open-webui-hub-watchtower-1',
        'port': None,
        'health_url': None,
        'env_file': 'watchtower.env',
        'config_files': [],
        'data_dir': None,
        'description': 'Container Auto-updater',
        'category': 'system'
    },
    'auth': {
        'container_name': 'open-webui-hub-auth-1',
        'port': 9090,
        'health_url': 'http://localhost:9090/health',
        'env_file': 'auth.env',
        'config_files': [],
        'data_dir': None,
        'description': 'JWT Auth Validator',
        'category': 'system'
    },
    'docling': {
        'container_name': 'open-webui-hub-docling-1',
        'port': 5001,
        'health_url': 'http://localhost:5001/health',
        'env_file': 'docling.env',
        'config_files': [],
        'data_dir': None,
        'description': 'Document Processing Service',
        'category': 'ai'
    },
    'edgetts': {
        'container_name': 'open-webui-hub-edgetts-1',
        'port': 5050,
        'health_url': None,  # EdgeTTS –Ω–µ –∏–º–µ–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ health endpoint
        'env_file': 'edgetts.env',
        'config_files': [],
        'data_dir': None,
        'description': 'Edge TTS Service',
        'category': 'ai'
    },
    'mcposerver': {
        'container_name': 'open-webui-hub-mcposerver-1',
        'port': 8000,
        'health_url': 'http://localhost:8000/docs',
        'env_file': 'mcposerver.env',
        'config_files': ['conf/mcposerver/config.json'],
        'data_dir': None,
        'description': 'MCPO Server',
        'category': 'ai'
    },
    'tika': {
        'container_name': 'open-webui-hub-tika-1',
        'port': 9998,
        'health_url': 'http://localhost:9998/tika',
        'env_file': 'tika.env',
        'config_files': [],
        'data_dir': None,
        'description': 'Apache Tika Document Parser',
        'category': 'ai'
    }
}

def cleanup_expired_cache():
    """–£–¥–∞–ª–∏—Ç—å —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∑–∞–ø–∏—Å–∏ –∫—ç—à–∞"""
    with _cache_lock:
        now = time.time()
        expired_keys = []

        for key, timestamp in _cache_timestamps.items():
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫—ç—à–∞ –∏ –µ–≥–æ TTL
            cache_type = key.split('_')[0] if '_' in key else 'default'
            duration = CACHE_DURATIONS.get(cache_type, 60)

            if now - timestamp > duration:
                expired_keys.append(key)

        # –£–¥–∞–ª—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∑–∞–ø–∏—Å–∏
        for key in expired_keys:
            _cache.pop(key, None)
            _cache_timestamps.pop(key, None)

        if expired_keys:
            print(f"üßπ –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞: —É–¥–∞–ª–µ–Ω–æ {len(expired_keys)} —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∑–∞–ø–∏—Å–µ–π")

        return len(expired_keys)

def schedule_cache_cleanup():
    """–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–≥—É–ª—è—Ä–Ω—É—é –æ—á–∏—Å—Ç–∫—É –∫—ç—à–∞"""
    cleanup_expired_cache()
    # –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â—É—é –æ—á–∏—Å—Ç–∫—É —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä–≤–∞–ª –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    interval = CONFIG['cache_cleanup_interval']
    threading.Timer(interval, schedule_cache_cleanup).start()

def get_cached_data(cache_key: str, cache_duration: int, fetch_function, *args, **kwargs):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π"""
    with _cache_lock:
        now = time.time()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –∫—ç—à–µ
        if (cache_key in _cache and
            cache_key in _cache_timestamps and
            now - _cache_timestamps[cache_key] < cache_duration):
            return _cache[cache_key]

        # –î–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –∏–ª–∏ –æ–Ω–∏ —É—Å—Ç–∞—Ä–µ–ª–∏ - –ø–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ
        try:
            data = fetch_function(*args, **kwargs)
            _cache[cache_key] = data
            _cache_timestamps[cache_key] = now
            return data
        except Exception as e:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
            if cache_key in _cache:
                print(f"‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è {cache_key}: {str(e)}")
                return _cache[cache_key]
            raise e

def _fetch_system_metrics():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ (–±–µ–∑ –±–ª–æ–∫–∏—Ä—É—é—â–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π)"""
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–∏–π –≤—ã–∑–æ–≤ –¥–ª—è CPU
        cpu_percent = psutil.cpu_percent(interval=None)  # –ù–µ –±–ª–æ–∫–∏—Ä—É–µ–º!
        memory = psutil.virtual_memory()
        disk = psutil.disk_usage('/')
        
        return {
            'cpu_usage': f"{cpu_percent:.1f}%",
            'memory_usage': f"{memory.percent:.1f}%",
            'disk_usage': f"{(disk.used / disk.total * 100):.1f}%",
            'memory_total': f"{memory.total / (1024**3):.1f} GB",
            'disk_total': f"{disk.total / (1024**3):.1f} GB",
            'timestamp': time.time()
        }
    except Exception as e:
        return {'error': str(e), 'timestamp': time.time()}

def _fetch_docker_stats():
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É Docker"""
    try:
        if not docker_client:
            return {'error': 'Docker client –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}
        
        containers = docker_client.containers.list(all=True)
        return {
            'total_containers': len(containers),
            'running_containers': len([c for c in containers if c.status == 'running']),
            'containers': [
                {
                    'name': c.name,
                    'status': c.status,
                    'short_id': c.short_id
                } for c in containers
            ],
            'timestamp': time.time()
        }
    except Exception as e:
        return {'error': str(e), 'timestamp': time.time()}

def _fetch_service_health(service_name: str, config: Dict[str, Any]):
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        # –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        container_status = 'unknown'
        container_error = None

        if docker_client:
            try:
                container = docker_client.containers.get(config['container_name'])
                container_status = container.status
            except docker.errors.NotFound:
                container_status = 'not_found'
                container_error = 'Container not found'
            except Exception as e:
                container_status = 'error'
                container_error = str(e)
        else:
            container_status = 'docker_unavailable'
            container_error = 'Docker client not available'

        # Health check —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π
        health_status = 'unknown'
        health_error = None

        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è PostgreSQL
        if service_name == 'db':
            try:
                result = subprocess.run(
                    ['docker', 'exec', config['container_name'], 'pg_isready', '-U', 'postgres'],
                    capture_output=True,
                    text=True,
                    timeout=5
                )
                if result.returncode == 0:
                    health_status = 'healthy'
                else:
                    health_status = 'unhealthy'
                    health_error = f'pg_isready failed: {result.stderr.strip()}'
            except subprocess.TimeoutExpired:
                health_status = 'timeout'
                health_error = 'PostgreSQL health check timeout'
            except Exception as e:
                health_status = 'error'
                health_error = f'PostgreSQL check error: {str(e)}'
        elif config.get('health_url'):
            try:
                headers = {}
                if config.get('auth_header'):
                    headers['Authorization'] = config['auth_header']

                response = requests.get(
                    config['health_url'],
                    timeout=5,  # –£–≤–µ–ª–∏—á–∏–ª–∏ —Ç–∞–π–º–∞—É—Ç
                    headers=headers
                )

                if response.status_code == 200:
                    health_status = 'healthy'
                elif response.status_code in [503, 502, 504]:
                    health_status = 'unhealthy'
                    health_error = f'HTTP {response.status_code}'
                else:
                    health_status = 'degraded'
                    health_error = f'HTTP {response.status_code}'

            except requests.exceptions.Timeout:
                health_status = 'timeout'
                health_error = 'Health check timeout'
            except requests.exceptions.ConnectionError:
                health_status = 'unreachable'
                health_error = 'Connection refused'
            except Exception as e:
                health_status = 'error'
                health_error = str(e)

        elif service_name == 'db':
            # –£–ª—É—á—à–µ–Ω–Ω—ã–π health check –¥–ª—è PostgreSQL
            try:
                result = subprocess.run(
                    ['docker', 'exec', config['container_name'], 'pg_isready', '-U', 'postgres'],
                    capture_output=True, text=True, timeout=5
                )
                if result.returncode == 0:
                    health_status = 'healthy'
                else:
                    health_status = 'unhealthy'
                    health_error = result.stderr.strip() if result.stderr else 'PostgreSQL not ready'
            except subprocess.TimeoutExpired:
                health_status = 'timeout'
                health_error = 'PostgreSQL check timeout'
            except Exception as e:
                health_status = 'error'
                health_error = str(e)

        elif service_name in ['watchtower']:
            # –°–µ—Ä–≤–∏—Å—ã –±–µ–∑ health URL - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
            if container_status == 'running':
                health_status = 'healthy'
            elif container_status in ['not_found', 'error']:
                health_status = 'unhealthy'
                health_error = container_error
            else:
                health_status = 'unknown'
        else:
            # –î–ª—è —Å–µ—Ä–≤–∏—Å–æ–≤ –±–µ–∑ health URL - —Å—á–∏—Ç–∞–µ–º –∑–¥–æ—Ä–æ–≤—ã–º–∏ –µ—Å–ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–ø—É—â–µ–Ω
            if container_status == 'running':
                health_status = 'assumed_healthy'
            else:
                health_status = 'unknown'

        result = {
            'container_status': container_status,
            'health_status': health_status,
            'timestamp': time.time()
        }

        # –î–æ–±–∞–≤–ª—è–µ–º –æ—à–∏–±–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
        if container_error:
            result['container_error'] = container_error
        if health_error:
            result['health_error'] = health_error

        return result

    except Exception as e:
        return {
            'container_status': 'error',
            'health_status': 'error',
            'error': str(e),
            'timestamp': time.time()
        }

def _fetch_container_resources(container_name: str):
    """–ü–æ–ª—É—á–∏—Ç—å —Ä–µ—Å—É—Ä—Å—ã –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        if not docker_client:
            return {
                'error': 'Docker client –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω',
                'status': 'docker_unavailable',
                'timestamp': time.time()
            }

        try:
            container = docker_client.containers.get(container_name)
        except docker.errors.NotFound:
            return {
                'error': '–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω',
                'status': 'not_found',
                'timestamp': time.time()
            }
        except Exception as e:
            return {
                'error': f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞: {str(e)}',
                'status': 'error',
                'timestamp': time.time()
            }

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        if container.status != 'running':
            return {
                'status': container.status,
                'memory_usage': 0,
                'memory_limit': 0,
                'memory_percent': 0,
                'cpu_percent': 0,
                'timestamp': time.time()
            }

        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å —Ç–∞–π–º–∞—É—Ç–æ–º
            stats = container.stats(stream=False)

            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏
            memory_stats = stats.get('memory_stats', {})
            memory_usage = memory_stats.get('usage', 0)
            memory_limit = memory_stats.get('limit', 0)

            if memory_limit > 0:
                memory_percent = round((memory_usage / memory_limit * 100), 2)
            else:
                memory_percent = 0

            # –ë–∞–∑–æ–≤–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ CPU (—É–ø—Ä–æ—â–µ–Ω–Ω–æ–µ)
            cpu_stats = stats.get('cpu_stats', {})
            precpu_stats = stats.get('precpu_stats', {})

            cpu_percent = 0
            if cpu_stats and precpu_stats:
                try:
                    cpu_delta = cpu_stats.get('cpu_usage', {}).get('total_usage', 0) - \
                               precpu_stats.get('cpu_usage', {}).get('total_usage', 0)
                    system_delta = cpu_stats.get('system_cpu_usage', 0) - \
                                  precpu_stats.get('system_cpu_usage', 0)

                    if system_delta > 0 and cpu_delta > 0:
                        cpu_count = len(cpu_stats.get('cpu_usage', {}).get('percpu_usage', [1]))
                        cpu_percent = round((cpu_delta / system_delta) * cpu_count * 100, 2)
                except:
                    cpu_percent = 0

            return {
                'status': container.status,
                'memory_usage': memory_usage,
                'memory_limit': memory_limit,
                'memory_percent': memory_percent,
                'cpu_percent': cpu_percent,
                'timestamp': time.time()
            }

        except Exception as e:
            return {
                'status': container.status,
                'error': f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}',
                'memory_usage': 0,
                'memory_limit': 0,
                'memory_percent': 0,
                'cpu_percent': 0,
                'timestamp': time.time()
            }

    except Exception as e:
        return {
            'error': f'–û–±—â–∞—è –æ—à–∏–±–∫–∞: {str(e)}',
            'status': 'error',
            'timestamp': time.time()
        }

# ===== API ENDPOINTS =====

@app.route('/api/metrics', methods=['GET'])
def get_system_metrics():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ (–∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ)"""
    try:
        metrics = get_cached_data(
            'system_metrics',
            CACHE_DURATIONS['system_metrics'],
            _fetch_system_metrics
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º Docker —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        docker_stats = get_cached_data(
            'docker_stats',
            CACHE_DURATIONS['docker_stats'],
            _fetch_docker_stats
        )
        
        return jsonify({
            'system': metrics,
            'docker': docker_stats,
            'cache_info': {
                'system_cache_age': time.time() - _cache_timestamps.get('system_metrics', 0),
                'docker_cache_age': time.time() - _cache_timestamps.get('docker_stats', 0)
            }
        })
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/api/status', methods=['GET'])
def get_services_status():
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ (–∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π)"""
    try:
        status = {}
        
        for service_name, config in SERVICES.items():
            cache_key = f'service_health_{service_name}'
            service_status = get_cached_data(
                cache_key,
                CACHE_DURATIONS['service_health'],
                _fetch_service_health,
                service_name,
                config
            )
            
            status[service_name] = {
                'name': service_name,
                'description': config.get('description', ''),
                'category': config.get('category', 'other'),
                'port': config.get('port'),
                **service_status
            }
        
        return jsonify(status)
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/api/services', methods=['GET'])
def get_services_info():
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–∏—Å–∞—Ö"""
    try:
        services_info = {}
        include_resources = request.args.get('resources', 'false').lower() == 'true'
        
        for service_name, config in SERVICES.items():
            # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (–∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–∞—è)
            cache_key = f'service_health_{service_name}'
            service_status = get_cached_data(
                cache_key,
                CACHE_DURATIONS['service_health'],
                _fetch_service_health,
                service_name,
                config
            )
            
            services_info[service_name] = {
                'name': service_name,
                'description': config.get('description', ''),
                'category': config.get('category', 'other'),
                'container_name': config['container_name'],
                'port': config.get('port'),
                **service_status
            }
            
            # –†–µ—Å—É—Ä—Å—ã (–µ—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω—ã)
            if include_resources:
                resources_cache_key = f'container_resources_{service_name}'
                resources = get_cached_data(
                    resources_cache_key,
                    CACHE_DURATIONS['container_resources'],
                    _fetch_container_resources,
                    config['container_name']
                )
                services_info[service_name]['resources'] = resources
        
        return jsonify(services_info)
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/api/system/stats', methods=['GET'])
def get_system_stats():
    """–ü–æ–ª—É—á–∏—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è)"""
    try:
        # –°–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        system_metrics = get_cached_data(
            'system_metrics',
            CACHE_DURATIONS['system_metrics'],
            _fetch_system_metrics
        )

        # Docker —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        docker_stats = get_cached_data(
            'docker_stats',
            CACHE_DURATIONS['docker_stats'],
            _fetch_docker_stats
        )

        return jsonify({
            'system': {
                'cpu_percent': float(system_metrics.get('cpu_usage', '0%').replace('%', '')),
                'memory_percent': float(system_metrics.get('memory_usage', '0%').replace('%', '')),
                'disk_percent': float(system_metrics.get('disk_usage', '0%').replace('%', '')),
            },
            'docker': docker_stats,
            'performance': {
                'cache_hits': len(_cache),
                'cache_age': {
                    'system': time.time() - _cache_timestamps.get('system_metrics', 0),
                    'docker': time.time() - _cache_timestamps.get('docker_stats', 0)
                }
            }
        })
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/api/cache/clear', methods=['POST'])
def clear_cache():
    """–û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)"""
    global _cache, _cache_timestamps
    with _cache_lock:
        cache_size = len(_cache)
        _cache.clear()
        _cache_timestamps.clear()

    return jsonify({
        'success': True,
        'message': f'–ö—ç—à –æ—á–∏—â–µ–Ω ({cache_size} –∑–∞–ø–∏—Å–µ–π —É–¥–∞–ª–µ–Ω–æ)'
    })

@app.route('/api/cache/info', methods=['GET'])
def get_cache_info():
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—ç—à–µ"""
    with _cache_lock:
        cache_info = {}
        now = time.time()

        for key, timestamp in _cache_timestamps.items():
            cache_info[key] = {
                'age': now - timestamp,
                'size': len(str(_cache.get(key, ''))),
                'expires_in': CACHE_DURATIONS.get(key.split('_')[0], 60) - (now - timestamp)
            }

    return jsonify({
        'cache_entries': len(_cache),
        'details': cache_info,
        'durations': CACHE_DURATIONS
    })

# –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ endpoints –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
@app.route('/api/db/health', methods=['GET'])
def check_db_health():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ PostgreSQL (–∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π)"""
    try:
        db_status = get_cached_data(
            'service_health_db',
            CACHE_DURATIONS['service_health'],
            _fetch_service_health,
            'db',
            SERVICES['db']
        )

        if db_status['health_status'] == 'healthy':
            return jsonify({'status': 'healthy', 'message': 'PostgreSQL is ready'})
        else:
            return jsonify({'status': 'unhealthy', 'error': db_status.get('error', 'Unknown error')}), 503
    except Exception as e:
        return jsonify({'status': 'error', 'error': str(e)}), 500

# ===== ENDPOINTS –î–õ–Ø –£–ü–†–ê–í–õ–ï–ù–ò–Ø –°–ï–†–í–ò–°–ê–ú–ò =====

@app.route('/api/service/<service_name>/control', methods=['POST'])
def control_service(service_name):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–µ—Ä–≤–∏—Å–æ–º (start/stop/restart)"""
    if service_name not in SERVICES:
        return jsonify({'error': '–°–µ—Ä–≤–∏—Å –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 404

    data = request.get_json()
    action = data.get('action')

    if action not in ['start', 'stop', 'restart']:
        return jsonify({'error': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ'}), 400

    try:
        result = subprocess.run(
            ['docker-compose', '-f', 'compose.local.yml', action, service_name],
            capture_output=True, text=True, cwd=PROJECT_ROOT
        )

        # –û—á–∏—â–∞–µ–º –∫—ç—à –¥–ª—è —ç—Ç–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
        cache_key = f'service_health_{service_name}'
        with _cache_lock:
            if cache_key in _cache:
                del _cache[cache_key]
            if cache_key in _cache_timestamps:
                del _cache_timestamps[cache_key]

        return jsonify({
            'success': result.returncode == 0,
            'action': action,
            'service': service_name,
            'output': result.stdout,
            'error': result.stderr if result.returncode != 0 else None
        })

    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/api/services/start-all', methods=['POST'])
def start_all_services():
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã"""
    try:
        result = subprocess.run(
            ['docker-compose', '-f', 'compose.local.yml', 'up', '-d'],
            capture_output=True, text=True, cwd=PROJECT_ROOT
        )

        # –û—á–∏—â–∞–µ–º –≤–µ—Å—å –∫—ç—à
        with _cache_lock:
            _cache.clear()
            _cache_timestamps.clear()

        return jsonify({
            'success': result.returncode == 0,
            'output': result.stdout,
            'error': result.stderr if result.returncode != 0 else None
        })
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/api/services/stop-all', methods=['POST'])
def stop_all_services():
    """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã"""
    try:
        result = subprocess.run(
            ['docker-compose', '-f', 'compose.local.yml', 'down'],
            capture_output=True, text=True, cwd=PROJECT_ROOT
        )

        # –û—á–∏—â–∞–µ–º –≤–µ—Å—å –∫—ç—à
        with _cache_lock:
            _cache.clear()
            _cache_timestamps.clear()

        return jsonify({
            'success': result.returncode == 0,
            'output': result.stdout,
            'error': result.stderr if result.returncode != 0 else None
        })
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/api/services/restart-all', methods=['POST'])
def restart_all_services():
    """–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã"""
    try:
        result = subprocess.run(
            ['docker-compose', '-f', 'compose.local.yml', 'restart'],
            capture_output=True, text=True, cwd=PROJECT_ROOT
        )

        # –û—á–∏—â–∞–µ–º –≤–µ—Å—å –∫—ç—à
        with _cache_lock:
            _cache.clear()
            _cache_timestamps.clear()

        return jsonify({
            'success': result.returncode == 0,
            'output': result.stdout,
            'error': result.stderr if result.returncode != 0 else None
        })
    except Exception as e:
        return jsonify({'error': str(e)}), 500

# ===== ENDPOINTS –î–õ–Ø –õ–û–ì–û–í –ò –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò =====

@app.route('/api/service/<service_name>/logs/stream', methods=['GET'])
def stream_service_logs(service_name):
    """–ü–æ–ª—É—á–∏—Ç—å –ª–æ–≥–∏ —Å–µ—Ä–≤–∏—Å–∞"""
    if service_name not in SERVICES:
        return jsonify({'error': '–°–µ—Ä–≤–∏—Å –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 404

    try:
        container_name = SERVICES[service_name]['container_name']
        lines = request.args.get('lines', 100, type=int)

        if docker_client:
            container = docker_client.containers.get(container_name)
            logs = container.logs(tail=lines, timestamps=True)
            if isinstance(logs, bytes):
                logs_text = logs.decode('utf-8')
            else:
                logs_text = str(logs)

            return jsonify({
                'logs': logs_text.split('\n'),
                'container': container_name
            })
        else:
            # Fallback –∫ docker CLI
            result = subprocess.run(
                ['docker', 'logs', '--tail', str(lines), container_name],
                capture_output=True, text=True
            )
            if result.returncode == 0:
                return jsonify({
                    'logs': result.stdout.split('\n'),
                    'container': container_name
                })
            else:
                return jsonify({'error': result.stderr}), 500

    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/api/service/<service_name>/config', methods=['GET'])
def get_service_config(service_name):
    """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å–µ—Ä–≤–∏—Å–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
    if service_name not in SERVICES:
        return jsonify({'error': '–°–µ—Ä–≤–∏—Å –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 404

    service_config = SERVICES[service_name]

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    return jsonify({
        'env_vars': {},  # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è - –Ω–µ —á–∏—Ç–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ env —Ñ–∞–π–ª—ã
        'config_files': {},
        'service_info': {
            'container_name': service_config['container_name'],
            'port': service_config.get('port'),
            'description': service_config.get('description'),
            'category': service_config.get('category')
        }
    })

@app.route('/api/service/<service_name>/config', methods=['POST'])
def update_service_config(service_name):
    """–û–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å–µ—Ä–≤–∏—Å–∞ (–∑–∞–≥–ª—É—à–∫–∞)"""
    if service_name not in SERVICES:
        return jsonify({'error': '–°–µ—Ä–≤–∏—Å –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 404

    # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è - –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—Ö
    return jsonify({
        'success': True,
        'message': '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)'
    })

@app.route('/api/service/<service_name>/backup', methods=['POST'])
def backup_service_config(service_name):
    """–°–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–∞ (–∑–∞–≥–ª—É—à–∫–∞)"""
    if service_name not in SERVICES:
        return jsonify({'error': '–°–µ—Ä–≤–∏—Å –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 404

    backup_id = f"{service_name}_{int(time.time())}"
    return jsonify({
        'success': True,
        'backup_id': backup_id,
        'message': f'–ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω: {backup_id} (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)'
    })

@app.route('/api/backups', methods=['GET'])
def list_backups():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –±—ç–∫–∞–ø–æ–≤ (–∑–∞–≥–ª—É—à–∫–∞)"""
    return jsonify({
        'backups': [
            {
                'id': 'example_backup_20250619',
                'service': 'example',
                'date': '20250619',
                'time': '154652',
                'files': ['config.yml'],
                'created': time.time()
            }
        ]
    })

# ===== –°–ü–ï–¶–ò–§–ò–ß–ù–´–ï ENDPOINTS –î–õ–Ø OLLAMA =====

@app.route('/api/ollama/models', methods=['GET'])
def get_ollama_models():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π Ollama"""
    try:
        response = requests.get('http://localhost:11435/api/tags', timeout=5)
        if response.status_code == 200:
            return jsonify(response.json())
        else:
            return jsonify({'error': 'Ollama –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}), 503
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/api/ollama/pull', methods=['POST'])
def pull_ollama_model():
    """–°–∫–∞—á–∞—Ç—å –º–æ–¥–µ–ª—å Ollama"""
    try:
        data = request.get_json()
        model_name = data.get('model')

        if not model_name:
            return jsonify({'error': '–ù–µ —É–∫–∞–∑–∞–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏'}), 400

        # –ó–∞–ø—É—Å–∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏ –≤ —Ñ–æ–Ω–µ
        subprocess.Popen([
            'docker', 'exec', 'open-webui-hub-ollama-1',
            'ollama', 'pull', model_name
        ])

        return jsonify({'message': f'–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ {model_name} –Ω–∞—á–∞—Ç–æ'})

    except Exception as e:
        return jsonify({'error': str(e)}), 500

# ===== –°–ü–ï–¶–ò–§–ò–ß–ù–´–ï ENDPOINTS –î–õ–Ø LITELLM =====

@app.route('/api/litellm/status', methods=['GET'])
def get_litellm_status():
    """–ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å LiteLLM"""
    try:
        headers = {'Authorization': f'Bearer {CONFIG["litellm_api_key"]}'}

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º /v1/models –∫–∞–∫ health check (–±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–æ)
        models_response = requests.get('http://localhost:4000/v1/models', headers=headers, timeout=10)

        if models_response.status_code == 200:
            models_data = models_response.json()

            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å health –¥–∞–Ω–Ω—ã–µ, –Ω–æ –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º—Å—è –Ω–∞ –Ω–∏—Ö
            health_data = {}
            try:
                health_response = requests.get('http://localhost:4000/health', headers=headers, timeout=5)
                if health_response.status_code == 200:
                    health_data = health_response.json()
            except:
                # –ï—Å–ª–∏ health endpoint –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –Ω–µ–≥–æ
                pass

            return jsonify({
                'status': 'healthy',
                'models': models_data.get('data', []),
                'total_models': len(models_data.get('data', [])),
                'healthy_endpoints': health_data.get('healthy_count', 'unknown'),
                'unhealthy_endpoints': health_data.get('unhealthy_count', 'unknown'),
                'health_data_available': bool(health_data)
            })
        else:
            return jsonify({
                'status': 'unhealthy',
                'error': f'Models endpoint failed with status {models_response.status_code}'
            }), 503

    except Exception as e:
        return jsonify({'status': 'error', 'error': str(e)}), 500

@app.route('/api/litellm/models', methods=['GET'])
def get_litellm_models():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π LiteLLM"""
    try:
        headers = {'Authorization': f'Bearer {CONFIG["litellm_api_key"]}'}
        response = requests.get('http://localhost:4000/v1/models', headers=headers, timeout=10)

        if response.status_code == 200:
            return jsonify(response.json())
        else:
            return jsonify({'error': 'Failed to fetch models'}), response.status_code

    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/api/litellm/test', methods=['POST'])
def test_litellm_model():
    """–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥–µ–ª—å LiteLLM"""
    try:
        data = request.get_json()
        model_name = data.get('model', 'llama3')
        test_message = data.get('message', '–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?')

        headers = {
            'Authorization': f'Bearer {CONFIG["litellm_api_key"]}',
            'Content-Type': 'application/json'
        }

        payload = {
            'model': model_name,
            'messages': [{'role': 'user', 'content': test_message}],
            'max_tokens': 100
        }

        response = requests.post(
            'http://localhost:4000/v1/chat/completions',
            headers=headers,
            json=payload,
            timeout=90  # –£–≤–µ–ª–∏—á–∏–ª–∏ —Ç–∞–π–º–∞—É—Ç –¥–ª—è –ø–µ—Ä–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏
        )

        if response.status_code == 200:
            return jsonify({
                'status': 'success',
                'response': response.json()
            })
        else:
            return jsonify({
                'status': 'error',
                'error': f'Request failed with status {response.status_code}',
                'details': response.text
            }), response.status_code

    except Exception as e:
        return jsonify({'status': 'error', 'error': str(e)}), 500

# ===== LEGACY ENDPOINTS –î–õ–Ø –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò =====

@app.route('/api/logs/<service>', methods=['GET'])
def get_service_logs_legacy(service):
    """–ü–æ–ª—É—á–∏—Ç—å –ª–æ–≥–∏ —Å–µ—Ä–≤–∏—Å–∞ (legacy endpoint)"""
    return stream_service_logs(service)

@app.route('/api/docker/<action>', methods=['POST'])
def docker_action(action):
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å Docker –¥–µ–π—Å—Ç–≤–∏–µ (legacy endpoint)"""
    try:
        if action == 'start':
            return start_all_services()
        elif action == 'stop':
            return stop_all_services()
        elif action == 'restart':
            return restart_all_services()
        else:
            return jsonify({'error': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ'}), 400
    except Exception as e:
        return jsonify({'error': str(e)}), 500

if __name__ == '__main__':
    print("üöÄ –ó–∞–ø—É—Å–∫ –£–õ–£–ß–®–ï–ù–ù–û–ì–û Dashboard API –¥–ª—è Open WebUI Hub")
    print(f"üìä API –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ http://{CONFIG['api_host']}:{CONFIG['api_port']}")
    print("üîó –û—Å–Ω–æ–≤–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã:")
    print("   GET  /api/status - —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤ (–∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π)")
    print("   GET  /api/metrics - –º–µ—Ç—Ä–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã (–∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π)")
    print("   GET  /api/services - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–∏—Å–∞—Ö")
    print("   GET  /api/system/stats - –æ–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    print("   GET  /api/cache/info - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—ç—à–µ")
    print("   POST /api/cache/clear - –æ—á–∏—Å—Ç–∏—Ç—å –∫—ç—à")
    print("‚ö° –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —É–ª—É—á—à–µ–Ω–∏—è:")
    print("   - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç")
    print("   - –£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–æ–≤")
    print("   - –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    print("   - –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ API –∫–ª—é—á–∞–º–∏")
    print("   - –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ Docker")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ—á–∏—Å—Ç–∫—É –∫—ç—à–∞
    print("üßπ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞...")
    schedule_cache_cleanup()

    # –ó–∞–ø—É—Å–∫–∞–µ–º API —Å–µ—Ä–≤–µ—Ä
    app.run(
        host=CONFIG['api_host'],
        port=CONFIG['api_port'],
        debug=CONFIG['debug_mode'],
        threaded=True
    )
