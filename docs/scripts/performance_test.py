#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ Dashboard API
–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Å—Ç–∞—Ä—É—é –∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏–∏
"""

import time
import requests
import threading
import psutil
import subprocess
from concurrent.futures import ThreadPoolExecutor
from typing import List, Dict, Any

class PerformanceTester:
    def __init__(self):
        self.old_api_url = "http://localhost:5002"
        self.new_api_url = "http://localhost:5003"
        self.results = {
            'old_api': {'response_times': [], 'errors': 0, 'cpu_usage': []},
            'new_api': {'response_times': [], 'errors': 0, 'cpu_usage': []}
        }

    def get_process_cpu(self, process_name: str) -> float:
        """–ü–æ–ª—É—á–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ CPU –ø—Ä–æ—Ü–µ—Å—Å–æ–º"""
        try:
            result = subprocess.run(
                ['ps', 'aux'], 
                capture_output=True, text=True
            )
            
            for line in result.stdout.split('\n'):
                if process_name in line and 'python' in line:
                    parts = line.split()
                    if len(parts) > 2:
                        return float(parts[2])  # CPU %
            return 0.0
        except:
            return 0.0

    def test_endpoint(self, url: str, endpoint: str, num_requests: int = 10) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π endpoint"""
        response_times = []
        errors = 0
        
        def make_request():
            try:
                start_time = time.time()
                response = requests.get(f"{url}{endpoint}", timeout=10)
                end_time = time.time()
                
                if response.status_code == 200:
                    response_times.append(end_time - start_time)
                else:
                    nonlocal errors
                    errors += 1
            except Exception:
                errors += 1

        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        with ThreadPoolExecutor(max_workers=5) as executor:
            futures = [executor.submit(make_request) for _ in range(num_requests)]
            for future in futures:
                future.result()

        return {
            'response_times': response_times,
            'errors': errors,
            'avg_response_time': sum(response_times) / len(response_times) if response_times else 0,
            'min_response_time': min(response_times) if response_times else 0,
            'max_response_time': max(response_times) if response_times else 0
        }

    def run_load_test(self, api_name: str, base_url: str, duration: int = 30):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –Ω–∞–≥—Ä—É–∑–æ—á–Ω—ã–π —Ç–µ—Å—Ç"""
        print(f"\nüî• –ù–∞–≥—Ä—É–∑–æ—á–Ω—ã–π —Ç–µ—Å—Ç {api_name} ({duration}s)")
        print("-" * 40)
        
        start_time = time.time()
        request_count = 0
        errors = 0
        response_times = []
        cpu_measurements = []
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ CPU
        process_name = "dashboard-api.py" if "5002" in base_url else "dashboard-api-optimized.py"
        
        while time.time() - start_time < duration:
            # –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã –∫ —Ä–∞–∑–Ω—ã–º endpoints
            endpoints = ['/api/status', '/api/metrics', '/api/services']
            
            for endpoint in endpoints:
                try:
                    req_start = time.time()
                    response = requests.get(f"{base_url}{endpoint}", timeout=5)
                    req_end = time.time()
                    
                    request_count += 1
                    response_times.append(req_end - req_start)
                    
                    if response.status_code != 200:
                        errors += 1
                        
                except Exception:
                    errors += 1
                    request_count += 1
            
            # –ò–∑–º–µ—Ä—è–µ–º CPU
            cpu_usage = self.get_process_cpu(process_name)
            cpu_measurements.append(cpu_usage)
            
            time.sleep(0.5)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        avg_response_time = sum(response_times) / len(response_times) if response_times else 0
        avg_cpu = sum(cpu_measurements) / len(cpu_measurements) if cpu_measurements else 0
        max_cpu = max(cpu_measurements) if cpu_measurements else 0
        
        success_rate = ((request_count - errors) / request_count * 100) if request_count > 0 else 0
        
        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
        print(f"   –ó–∞–ø—Ä–æ—Å–æ–≤: {request_count}")
        print(f"   –û—à–∏–±–æ–∫: {errors}")
        print(f"   –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%")
        print(f"   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {avg_response_time:.3f}s")
        print(f"   –ú–∏–Ω –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {min(response_times):.3f}s" if response_times else "   –ú–∏–Ω –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: N/A")
        print(f"   –ú–∞–∫—Å –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {max(response_times):.3f}s" if response_times else "   –ú–∞–∫—Å –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: N/A")
        print(f"   –°—Ä–µ–¥–Ω–µ–µ CPU: {avg_cpu:.1f}%")
        print(f"   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ CPU: {max_cpu:.1f}%")
        print(f"   RPS: {request_count/duration:.1f}")
        
        return {
            'requests': request_count,
            'errors': errors,
            'success_rate': success_rate,
            'avg_response_time': avg_response_time,
            'min_response_time': min(response_times) if response_times else 0,
            'max_response_time': max(response_times) if response_times else 0,
            'avg_cpu': avg_cpu,
            'max_cpu': max_cpu,
            'rps': request_count/duration
        }

    def test_specific_endpoints(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ endpoints"""
        print("\nüéØ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ö–û–ù–ö–†–ï–¢–ù–´–• ENDPOINTS")
        print("=" * 50)
        
        endpoints = ['/api/status', '/api/metrics', '/api/services']
        
        for endpoint in endpoints:
            print(f"\nüìç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {endpoint}")
            print("-" * 30)
            
            # –¢–µ—Å—Ç —Å—Ç–∞—Ä–æ–≥–æ API
            print("–°—Ç–∞—Ä—ã–π API:")
            old_result = self.test_endpoint(self.old_api_url, endpoint, 5)
            print(f"  –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {old_result['avg_response_time']:.3f}s")
            print(f"  –û—à–∏–±–æ–∫: {old_result['errors']}/5")
            
            # –¢–µ—Å—Ç –Ω–æ–≤–æ–≥–æ API
            print("–ù–æ–≤—ã–π API:")
            new_result = self.test_endpoint(self.new_api_url, endpoint, 5)
            print(f"  –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {new_result['avg_response_time']:.3f}s")
            print(f"  –û—à–∏–±–æ–∫: {new_result['errors']}/5")
            
            # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ
            if old_result['avg_response_time'] > 0 and new_result['avg_response_time'] > 0:
                improvement = (old_result['avg_response_time'] - new_result['avg_response_time']) / old_result['avg_response_time'] * 100
                print(f"  üöÄ –£–ª—É—á—à–µ–Ω–∏–µ: {improvement:.1f}%")

    def run_comparison_test(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ—Å—Ç"""
        print("üöÄ –°–†–ê–í–ù–ò–¢–ï–õ–¨–ù–´–ô –¢–ï–°–¢ –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò")
        print("=" * 60)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ endpoints
        self.test_specific_endpoints()
        
        # –ù–∞–≥—Ä—É–∑–æ—á–Ω—ã–µ —Ç–µ—Å—Ç—ã
        print("\nüî• –ù–ê–ì–†–£–ó–û–ß–ù–´–ï –¢–ï–°–¢–´")
        print("=" * 30)
        
        # –¢–µ—Å—Ç —Å—Ç–∞—Ä–æ–≥–æ API
        old_results = self.run_load_test("–°–¢–ê–†–´–ô API", self.old_api_url, 20)
        
        # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞
        time.sleep(2)
        
        # –¢–µ—Å—Ç –Ω–æ–≤–æ–≥–æ API
        new_results = self.run_load_test("–ù–û–í–´–ô API", self.new_api_url, 20)
        
        # –ò—Ç–æ–≥–æ–≤–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
        print("\nüìä –ò–¢–û–ì–û–í–û–ï –°–†–ê–í–ù–ï–ù–ò–ï")
        print("=" * 40)
        
        metrics = [
            ('–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞', 'avg_response_time', 's', True),
            ('–°—Ä–µ–¥–Ω–µ–µ CPU', 'avg_cpu', '%', True),
            ('–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ CPU', 'max_cpu', '%', True),
            ('RPS', 'rps', 'req/s', False),
            ('–£—Å–ø–µ—à–Ω–æ—Å—Ç—å', 'success_rate', '%', False)
        ]
        
        for metric_name, metric_key, unit, lower_is_better in metrics:
            old_val = old_results.get(metric_key, 0)
            new_val = new_results.get(metric_key, 0)
            
            if old_val > 0:
                if lower_is_better:
                    improvement = (old_val - new_val) / old_val * 100
                    comparison = "–ª—É—á—à–µ" if improvement > 0 else "—Ö—É–∂–µ"
                else:
                    improvement = (new_val - old_val) / old_val * 100
                    comparison = "–ª—É—á—à–µ" if improvement > 0 else "—Ö—É–∂–µ"
                
                print(f"{metric_name}:")
                print(f"  –°—Ç–∞—Ä—ã–π API: {old_val:.3f}{unit}")
                print(f"  –ù–æ–≤—ã–π API:  {new_val:.3f}{unit}")
                print(f"  –ò–∑–º–µ–Ω–µ–Ω–∏–µ:  {abs(improvement):.1f}% {comparison}")
                print()

if __name__ == "__main__":
    tester = PerformanceTester()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API
    try:
        requests.get(tester.old_api_url + "/api/status", timeout=5)
        print("‚úÖ –°—Ç–∞—Ä—ã–π API –¥–æ—Å—Ç—É–ø–µ–Ω")
    except:
        print("‚ùå –°—Ç–∞—Ä—ã–π API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        exit(1)
    
    try:
        requests.get(tester.new_api_url + "/api/status", timeout=5)
        print("‚úÖ –ù–æ–≤—ã–π API –¥–æ—Å—Ç—É–ø–µ–Ω")
    except:
        print("‚ùå –ù–æ–≤—ã–π API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        exit(1)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    tester.run_comparison_test()
