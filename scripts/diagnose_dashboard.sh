#!/bin/bash

# üîç –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ Open WebUI Hub Dashboard
# –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: 19 –∏—é–Ω—è 2025
# –í–µ—Ä—Å–∏—è: 1.0

echo "üîç –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ Open WebUI Hub Dashboard"
echo "=================================================="
echo "–î–∞—Ç–∞: $(date)"
echo ""

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ü–≤–µ—Ç–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

print_section() {
    echo ""
    echo -e "${BLUE}=== $1 ===${NC}"
}

# –°—á–µ—Ç—á–∏–∫–∏
TOTAL_CHECKS=0
PASSED_CHECKS=0
FAILED_CHECKS=0

check_result() {
    TOTAL_CHECKS=$((TOTAL_CHECKS + 1))
    if [ $1 -eq 0 ]; then
        PASSED_CHECKS=$((PASSED_CHECKS + 1))
        print_success "$2"
    else
        FAILED_CHECKS=$((FAILED_CHECKS + 1))
        print_error "$2"
    fi
}

# 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ Dashboard API
print_section "1. Dashboard API"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞
if pgrep -f "dashboard-api.py" > /dev/null; then
    check_result 0 "Dashboard API –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—â–µ–Ω"
    
    # –ü–æ–ª—É—á–∞–µ–º PID –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ü–µ—Å—Å–µ
    PID=$(pgrep -f "dashboard-api.py")
    print_info "PID: $PID"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–∞
    if lsof -i :5002 > /dev/null 2>&1; then
        check_result 0 "–ü–æ—Ä—Ç 5002 –æ—Ç–∫—Ä—ã—Ç"
    else
        check_result 1 "–ü–æ—Ä—Ç 5002 –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω"
    fi
else
    check_result 1 "Dashboard API –Ω–µ –∑–∞–ø—É—â–µ–Ω"
    print_warning "–ó–∞–ø—É—Å—Ç–∏—Ç–µ: python3 dashboard-api.py"
fi

# 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ API endpoints
print_section "2. API Endpoints"

API_BASE="http://localhost:5002"
ENDPOINTS=(
    "/api/status:–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤"
    "/api/services:–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–∏—Å–∞—Ö"
    "/api/system/stats:–°–∏—Å—Ç–µ–º–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
    "/api/service/litellm/config:–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è LiteLLM"
)

for endpoint_info in "${ENDPOINTS[@]}"; do
    IFS=':' read -r endpoint description <<< "$endpoint_info"
    
    if curl -s -f "${API_BASE}${endpoint}" > /dev/null 2>&1; then
        check_result 0 "$description ($endpoint)"
    else
        check_result 1 "$description ($endpoint)"
    fi
done

# 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
print_section "3. –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å API"

print_info "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∞..."

# –¢–µ—Å—Ç –±—ã—Å—Ç—Ä–æ–≥–æ endpoint
START_TIME=$(date +%s%N)
if curl -s "${API_BASE}/api/services" > /dev/null 2>&1; then
    END_TIME=$(date +%s%N)
    DURATION=$(( (END_TIME - START_TIME) / 1000000 ))
    
    if [ $DURATION -lt 1000 ]; then
        check_result 0 "/api/services –æ—Ç–≤–µ—á–∞–µ—Ç –±—ã—Å—Ç—Ä–æ (${DURATION}ms)"
    elif [ $DURATION -lt 5000 ]; then
        check_result 0 "/api/services –æ—Ç–≤–µ—á–∞–µ—Ç –ø—Ä–∏–µ–º–ª–µ–º–æ (${DURATION}ms)"
        print_warning "–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –±–æ–ª—å—à–µ 1 —Å–µ–∫—É–Ω–¥—ã"
    else
        check_result 1 "/api/services –æ—Ç–≤–µ—á–∞–µ—Ç –º–µ–¥–ª–µ–Ω–Ω–æ (${DURATION}ms)"
    fi
else
    check_result 1 "/api/services –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç"
fi

# 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker
print_section "4. Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã"

if command -v docker > /dev/null 2>&1; then
    check_result 0 "Docker —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
    RUNNING_CONTAINERS=$(docker ps --filter "name=open-webui-hub" --format "{{.Names}}" | wc -l)
    
    if [ $RUNNING_CONTAINERS -gt 0 ]; then
        check_result 0 "–ù–∞–π–¥–µ–Ω–æ $RUNNING_CONTAINERS –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ Open WebUI Hub"
        
        # –°–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
        print_info "–ó–∞–ø—É—â–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã:"
        docker ps --filter "name=open-webui-hub" --format "  ‚Ä¢ {{.Names}} ({{.Status}})"
    else
        check_result 1 "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã Open WebUI Hub –Ω–µ –∑–∞–ø—É—â–µ–Ω—ã"
        print_warning "–ó–∞–ø—É—Å—Ç–∏—Ç–µ: docker-compose -f compose.local.yml up -d"
    fi
else
    check_result 1 "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
fi

# 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞
print_section "5. –§–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞"

PROJECT_FILES=(
    "dashboard-api.py:Dashboard API —Å–∫—Ä–∏–ø—Ç"
    "advanced-dashboard.html:–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"
    "compose.local.yml:Docker Compose –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è"
    "env/:–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"
    "conf/:–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π"
)

for file_info in "${PROJECT_FILES[@]}"; do
    IFS=':' read -r file description <<< "$file_info"
    
    if [ -e "$file" ]; then
        check_result 0 "$description —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
    else
        check_result 1 "$description –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
    fi
done

# 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π Python
print_section "6. Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"

PYTHON_DEPS=(
    "flask:Flask –≤–µ–±-—Ñ—Ä–µ–π–º–≤–æ—Ä–∫"
    "flask_cors:CORS –ø–æ–¥–¥–µ—Ä–∂–∫–∞"
    "docker:Docker Python –∫–ª–∏–µ–Ω—Ç"
    "requests:HTTP –∫–ª–∏–µ–Ω—Ç"
    "psutil:–°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
    "yaml:YAML –ø–∞—Ä—Å–µ—Ä"
)

for dep_info in "${PYTHON_DEPS[@]}"; do
    IFS=':' read -r dep description <<< "$dep_info"
    
    if python3 -c "import $dep" 2>/dev/null; then
        check_result 0 "$description —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    else
        check_result 1 "$description –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        print_warning "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip3 install $dep"
    fi
done

# 7. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
print_section "7. –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã"

# CPU
CPU_USAGE=$(python3 -c "import psutil; print(psutil.cpu_percent(interval=1))" 2>/dev/null || echo "N/A")
if [ "$CPU_USAGE" != "N/A" ]; then
    if (( $(echo "$CPU_USAGE < 80" | bc -l) )); then
        check_result 0 "CPU –∑–∞–≥—Ä—É–∑–∫–∞ –≤ –Ω–æ—Ä–º–µ (${CPU_USAGE}%)"
    else
        check_result 1 "–í—ã—Å–æ–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ CPU (${CPU_USAGE}%)"
    fi
else
    check_result 1 "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É CPU"
fi

# –ü–∞–º—è—Ç—å
MEMORY_INFO=$(python3 -c "import psutil; mem=psutil.virtual_memory(); print(f'{mem.percent:.1f}')" 2>/dev/null || echo "N/A")
if [ "$MEMORY_INFO" != "N/A" ]; then
    if (( $(echo "$MEMORY_INFO < 80" | bc -l) )); then
        check_result 0 "–ü–∞–º—è—Ç—å –≤ –Ω–æ—Ä–º–µ (${MEMORY_INFO}%)"
    else
        check_result 1 "–í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ (${MEMORY_INFO}%)"
    fi
else
    check_result 1 "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞–º—è—Ç–∏"
fi

# 8. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤
print_section "8. –õ–æ–≥–∏ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"

# –õ–æ–≥–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
if [ -f "logs/security.log" ]; then
    LOG_LINES=$(wc -l < logs/security.log)
    check_result 0 "–õ–æ–≥ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ($LOG_LINES –∑–∞–ø–∏—Å–µ–π)"
else
    check_result 1 "–õ–æ–≥ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
fi

# –ë—ç–∫–∞–ø—ã
if [ -d "backups" ]; then
    BACKUP_COUNT=$(find backups -type d -name "*_*" | wc -l)
    if [ $BACKUP_COUNT -gt 0 ]; then
        check_result 0 "–ù–∞–π–¥–µ–Ω–æ $BACKUP_COUNT –±—ç–∫–∞–ø–æ–≤"
    else
        check_result 0 "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –±—ç–∫–∞–ø–æ–≤ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (–ø—É—Å—Ç–∞)"
    fi
else
    check_result 1 "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –±—ç–∫–∞–ø–æ–≤ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
fi

# 9. –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
print_section "9. –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç"

echo ""
echo "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–æ–∫:"
echo "  ‚Ä¢ –í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–æ–∫: $TOTAL_CHECKS"
echo "  ‚Ä¢ –£—Å–ø–µ—à–Ω–æ: $PASSED_CHECKS"
echo "  ‚Ä¢ –ù–µ—É–¥–∞—á–Ω–æ: $FAILED_CHECKS"
echo ""

SUCCESS_RATE=$(( PASSED_CHECKS * 100 / TOTAL_CHECKS ))

if [ $SUCCESS_RATE -ge 90 ]; then
    print_success "–°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ! ($SUCCESS_RATE% –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø—Ä–æ–π–¥–µ–Ω–æ)"
    echo ""
    print_info "üöÄ –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:"
    echo "   ‚Ä¢ Dashboard API: http://localhost:5002"
    echo "   ‚Ä¢ –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è: file://$(pwd)/advanced-dashboard.html"
    echo "   ‚Ä¢ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞: file://$(pwd)/test-dashboard-api.html"
elif [ $SUCCESS_RATE -ge 70 ]; then
    print_warning "–°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏ ($SUCCESS_RATE% –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø—Ä–æ–π–¥–µ–Ω–æ)"
    echo ""
    print_info "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:"
    echo "   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–µ—É–¥–∞—á–Ω—ã–µ —Ç–µ—Å—Ç—ã –≤—ã—à–µ"
    echo "   ‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ DASHBOARD_QUICK_FIX.md"
else
    print_error "–°–∏—Å—Ç–µ–º–∞ —Ç—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è! ($SUCCESS_RATE% –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø—Ä–æ–π–¥–µ–Ω–æ)"
    echo ""
    print_info "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã:"
    echo "   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Å–µ –Ω–µ—É–¥–∞—á–Ω—ã–µ —Ç–µ—Å—Ç—ã"
    echo "   ‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ DASHBOARD_TROUBLESHOOTING_REPORT.md"
    echo "   ‚Ä¢ –í—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–ª–Ω—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã"
fi

echo ""
echo "üìö –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏:"
echo "   ‚Ä¢ –ü–æ–ª–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ: ADVANCED_DASHBOARD_GUIDE.md"
echo "   ‚Ä¢ –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç: QUICK_START_ADVANCED_DASHBOARD.md"
echo "   ‚Ä¢ –£—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –Ω–µ–ø–æ–ª–∞–¥–æ–∫: DASHBOARD_QUICK_FIX.md"
echo ""
echo "üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: $(date)"
