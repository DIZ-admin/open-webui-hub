import React, { useState, useEffect } from 'react'
import { motion } from 'framer-motion'
import { MetricsData } from '../types'

const RealTimeMetrics: React.FC = () => {
  const [metrics, setMetrics] = useState<MetricsData | null>(null)
  const [isLoading, setIsLoading] = useState(false)
  const [lastUpdate, setLastUpdate] = useState<Date | null>(null)
  const [autoRefresh, setAutoRefresh] = useState(true)

  const fetchMetrics = async () => {
    setIsLoading(true)
    try {
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Hub Service API —á–µ—Ä–µ–∑ Nginx
      const response = await fetch('/api/metrics')
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`)
      }
      const data = await response.json()
      setMetrics(data)
      setLastUpdate(new Date())
    } catch (error) {
      console.error('Error fetching metrics:', error)
    } finally {
      setIsLoading(false)
    }
  }

  useEffect(() => {
    fetchMetrics()
  }, [])

  useEffect(() => {
    if (!autoRefresh) return

    const interval = setInterval(() => {
      fetchMetrics()
    }, 10000) // Refresh every 10 seconds for metrics

    return () => clearInterval(interval)
  }, [autoRefresh])

  const formatUptime = (seconds: number) => {
    const hours = Math.floor(seconds / 3600)
    const minutes = Math.floor((seconds % 3600) / 60)
    const secs = Math.floor(seconds % 60)
    return `${hours}—á ${minutes}–º ${secs}—Å`
  }

  const getHealthPercentage = (healthy: number, total: number) => {
    return total > 0 ? Math.round((healthy / total) * 100) : 0
  }

  if (!metrics) {
    return (
      <div className="flex justify-center items-center h-64">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500"></div>
      </div>
    )
  }

  return (
    <div className="space-y-8">
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        className="text-center mb-8"
      >
        <h2 className="text-3xl font-bold mb-4 bg-gradient-to-r from-green-400 to-blue-400 bg-clip-text text-transparent">
          –ú–µ—Ç—Ä–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
        </h2>
        <p className="text-gray-300 max-w-3xl mx-auto mb-4">
          –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ Open WebUI Hub –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.
        </p>
        
        {/* Control Panel */}
        <div className="flex items-center justify-center space-x-4 mb-4">
          <button
            onClick={fetchMetrics}
            disabled={isLoading}
            className="px-4 py-2 bg-green-600 hover:bg-green-700 disabled:bg-green-800 text-white rounded-lg transition-colors flex items-center space-x-2"
          >
            <span>{isLoading ? 'üîÑ' : 'üìä'}</span>
            <span>{isLoading ? '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ...' : '–û–±–Ω–æ–≤–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏'}</span>
          </button>
          
          <button
            onClick={() => setAutoRefresh(!autoRefresh)}
            className={`px-4 py-2 rounded-lg transition-colors flex items-center space-x-2 ${
              autoRefresh 
                ? 'bg-blue-600 hover:bg-blue-700 text-white' 
                : 'bg-gray-600 hover:bg-gray-700 text-white'
            }`}
          >
            <span>{autoRefresh ? '‚è∏Ô∏è' : '‚ñ∂Ô∏è'}</span>
            <span>–ê–≤—Ç–æ-–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (10—Å)</span>
          </button>
          
          {lastUpdate && (
            <span className="text-sm text-gray-400">
              –û–±–Ω–æ–≤–ª–µ–Ω–æ: {lastUpdate.toLocaleTimeString()}
            </span>
          )}
        </div>
      </motion.div>

      {/* Main Metrics Cards */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        <motion.div
          className="bg-gradient-to-br from-green-600 to-green-700 p-6 rounded-xl text-white"
          initial={{ opacity: 0, scale: 0.9 }}
          animate={{ opacity: 1, scale: 1 }}
          transition={{ delay: 0.1 }}
        >
          <div className="flex items-center justify-between">
            <div>
              <p className="text-green-100 text-sm">–ó–¥–æ—Ä–æ–≤—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤</p>
              <p className="text-3xl font-bold">{metrics.healthy_services}</p>
              <p className="text-green-100 text-sm">–∏–∑ {metrics.total_services}</p>
            </div>
            <div className="text-4xl">üíö</div>
          </div>
          <div className="mt-4">
            <div className="bg-green-800 rounded-full h-2">
              <div 
                className="bg-green-300 h-2 rounded-full transition-all duration-500"
                style={{ width: `${getHealthPercentage(metrics.healthy_services, metrics.total_services)}%` }}
              />
            </div>
            <p className="text-green-100 text-xs mt-1">
              {getHealthPercentage(metrics.healthy_services, metrics.total_services)}% –∑–¥–æ—Ä–æ–≤—ã—Ö
            </p>
          </div>
        </motion.div>

        <motion.div
          className="bg-gradient-to-br from-blue-600 to-blue-700 p-6 rounded-xl text-white"
          initial={{ opacity: 0, scale: 0.9 }}
          animate={{ opacity: 1, scale: 1 }}
          transition={{ delay: 0.2 }}
        >
          <div className="flex items-center justify-between">
            <div>
              <p className="text-blue-100 text-sm">–ó–∞–ø—É—â–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤</p>
              <p className="text-3xl font-bold">{metrics.running_containers}</p>
              <p className="text-blue-100 text-sm">–∏–∑ {metrics.total_services}</p>
            </div>
            <div className="text-4xl">üê≥</div>
          </div>
          <div className="mt-4">
            <div className="bg-blue-800 rounded-full h-2">
              <div 
                className="bg-blue-300 h-2 rounded-full transition-all duration-500"
                style={{ width: `${getHealthPercentage(metrics.running_containers, metrics.total_services)}%` }}
              />
            </div>
            <p className="text-blue-100 text-xs mt-1">
              {getHealthPercentage(metrics.running_containers, metrics.total_services)}% –∑–∞–ø—É—â–µ–Ω–æ
            </p>
          </div>
        </motion.div>

        <motion.div
          className="bg-gradient-to-br from-purple-600 to-purple-700 p-6 rounded-xl text-white"
          initial={{ opacity: 0, scale: 0.9 }}
          animate={{ opacity: 1, scale: 1 }}
          transition={{ delay: 0.3 }}
        >
          <div className="flex items-center justify-between">
            <div>
              <p className="text-purple-100 text-sm">–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã—Ö —Å–ª–æ–µ–≤</p>
              <p className="text-3xl font-bold">{metrics.layers}</p>
              <p className="text-purple-100 text-sm">—É—Ä–æ–≤–Ω–µ–π</p>
            </div>
            <div className="text-4xl">üèóÔ∏è</div>
          </div>
        </motion.div>

        <motion.div
          className="bg-gradient-to-br from-orange-600 to-orange-700 p-6 rounded-xl text-white"
          initial={{ opacity: 0, scale: 0.9 }}
          animate={{ opacity: 1, scale: 1 }}
          transition={{ delay: 0.4 }}
        >
          <div className="flex items-center justify-between">
            <div>
              <p className="text-orange-100 text-sm">–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã</p>
              <p className="text-lg font-bold">{formatUptime(metrics.uptime)}</p>
              <p className="text-orange-100 text-sm">Hub API</p>
            </div>
            <div className="text-4xl">‚è±Ô∏è</div>
          </div>
        </motion.div>
      </div>

      {/* Layer Breakdown */}
      <motion.div
        className="bg-gray-800/50 p-6 rounded-xl border border-gray-700"
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ delay: 0.5 }}
      >
        <h3 className="text-xl font-bold text-white mb-6">–ú–µ—Ç—Ä–∏–∫–∏ –ø–æ —Å–ª–æ—è–º –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã</h3>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
          {Object.entries(metrics.layer_metrics).map(([layerId, layerMetrics]) => (
            <div key={layerId} className="bg-gray-700/50 p-4 rounded-lg">
              <h4 className="font-semibold text-white mb-3 capitalize">{layerId} Layer</h4>
              <div className="space-y-2">
                <div className="flex justify-between text-sm">
                  <span className="text-gray-300">–í—Å–µ–≥–æ:</span>
                  <span className="text-white">{layerMetrics.total}</span>
                </div>
                <div className="flex justify-between text-sm">
                  <span className="text-gray-300">–ó–¥–æ—Ä–æ–≤—ã—Ö:</span>
                  <span className="text-green-400">{layerMetrics.healthy}</span>
                </div>
                <div className="flex justify-between text-sm">
                  <span className="text-gray-300">–ó–∞–ø—É—â–µ–Ω–Ω—ã—Ö:</span>
                  <span className="text-blue-400">{layerMetrics.running}</span>
                </div>
                <div className="mt-2">
                  <div className="bg-gray-600 rounded-full h-2">
                    <div
                      className="bg-green-500 h-2 rounded-full transition-all duration-500"
                      style={{ width: `${getHealthPercentage(layerMetrics.healthy, layerMetrics.total)}%` }}
                    />
                  </div>
                  <p className="text-gray-400 text-xs mt-1">
                    {getHealthPercentage(layerMetrics.healthy, layerMetrics.total)}% –∑–¥–æ—Ä–æ–≤—ã—Ö
                  </p>
                </div>
              </div>
            </div>
          ))}
        </div>
      </motion.div>

      {/* Error Services Alert */}
      {metrics.error_services > 0 && (
        <motion.div
          className="bg-red-900/50 border border-red-600 p-4 rounded-xl"
          initial={{ opacity: 0, scale: 0.9 }}
          animate={{ opacity: 1, scale: 1 }}
        >
          <div className="flex items-center space-x-3">
            <div className="text-2xl">‚ö†Ô∏è</div>
            <div>
              <h4 className="text-red-400 font-semibold">–í–Ω–∏–º–∞–Ω–∏–µ: –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã</h4>
              <p className="text-red-300 text-sm">
                {metrics.error_services} —Å–µ—Ä–≤–∏—Å(–æ–≤) –∏–º–µ—é—Ç –æ—à–∏–±–∫–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–µ—Ç–∞–ª–∏ –≤ –¥–∏–∞–≥—Ä–∞–º–º–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã.
              </p>
            </div>
          </div>
        </motion.div>
      )}
    </div>
  )
}

export default RealTimeMetrics
