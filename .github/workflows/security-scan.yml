name: üîí Security Scanning

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    # –ó–∞–ø—É—Å–∫ –∫–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é –≤ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –≤ 03:00 UTC
    - cron: '0 3 * * 0'
  workflow_dispatch:

jobs:
  # ============================================================================
  # –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ–∫—Ä–µ—Ç–æ–≤
  # ============================================================================
  secret-scanning:
    name: üîç Secret Scanning
    runs-on: ubuntu-latest
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üîç Run TruffleHog secret scan
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          extra_args: --debug --only-verified

      - name: üîç Run GitLeaks secret scan
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # ============================================================================
  # –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π –≤ –∫–æ–¥–µ
  # ============================================================================
  code-vulnerability-scan:
    name: üõ°Ô∏è Code Vulnerability Scan
    runs-on: ubuntu-latest
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üîí Run Trivy filesystem scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-fs-results.sarif'

      - name: üìä Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-fs-results.sarif'

      - name: üîç Run CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: typescript, python

      - name: üèóÔ∏è Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: üîç Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  # ============================================================================
  # –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ Docker –æ–±—Ä–∞–∑–æ–≤
  # ============================================================================
  docker-security-scan:
    name: üê≥ Docker Security Scan
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [docling, HUB]
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üê≥ Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: üèóÔ∏è Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./services/${{ matrix.service }}
          load: true
          tags: ${{ matrix.service }}:security-test

      - name: üîí Run Trivy container scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ matrix.service }}:security-test'
          format: 'sarif'
          output: 'trivy-${{ matrix.service }}-results.sarif'

      - name: üìä Upload Trivy container scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-${{ matrix.service }}-results.sarif'

      - name: üîç Run Snyk container scan
        continue-on-error: true
        if: env.SNYK_TOKEN != ''
        uses: snyk/actions/docker@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: '${{ matrix.service }}:security-test'
          args: --severity-threshold=high

  # ============================================================================
  # –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
  # ============================================================================
  dependency-scan:
    name: üì¶ Dependency Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üêç Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: üü¢ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: üîç Python dependency scan with Safety
        run: |
          pip install safety
          if [ -f tests/requirements.txt ]; then
            safety check -r tests/requirements.txt --json --output safety-report.json || true
          fi

      - name: üîç Python dependency scan with pip-audit
        run: |
          pip install pip-audit
          if [ -f tests/requirements.txt ]; then
            pip-audit -r tests/requirements.txt --format=json --output=pip-audit-report.json || true
          fi

      - name: üîç Node.js dependency scan
        working-directory: services/HUB
        run: |
          if [ -f package.json ]; then
            npm audit --audit-level=moderate --json > npm-audit-report.json || true
          fi

      - name: üìä Generate dependency security report
        run: |
          echo "# üì¶ Dependency Security Report" > dependency-security-report.md
          echo "" >> dependency-security-report.md
          echo "## Python Dependencies" >> dependency-security-report.md
          
          if [ -f safety-report.json ]; then
            echo "### Safety Scan Results" >> dependency-security-report.md
            python -c "
            import json
            try:
                with open('safety-report.json') as f:
                    data = json.load(f)
                    if data:
                        print('Found vulnerabilities in Python dependencies')
                    else:
                        print('No vulnerabilities found in Python dependencies')
            except:
                print('Safety scan completed')
            " >> dependency-security-report.md
          fi
          
          if [ -f pip-audit-report.json ]; then
            echo "### Pip-audit Results" >> dependency-security-report.md
            echo "Pip-audit scan completed" >> dependency-security-report.md
          fi
          
          echo "" >> dependency-security-report.md
          echo "## Node.js Dependencies" >> dependency-security-report.md
          
          if [ -f services/HUB/npm-audit-report.json ]; then
            echo "### NPM Audit Results" >> dependency-security-report.md
            echo "NPM audit scan completed" >> dependency-security-report.md
          fi

      - name: üì§ Upload dependency scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: dependency-security-scan
          path: |
            safety-report.json
            pip-audit-report.json
            services/HUB/npm-audit-report.json
            dependency-security-report.md

  # ============================================================================
  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
  # ============================================================================
  security-config-check:
    name: ‚öôÔ∏è Security Configuration Check
    runs-on: ubuntu-latest
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üîç Check .gitignore for sensitive files
        run: |
          echo "üîç Checking .gitignore configuration..."
          
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –∏—Å–∫–ª—é—á–µ–Ω—ã
          sensitive_patterns=(
            "*.env"
            "*.key"
            "*.pem"
            "secrets/"
            "data/"
            "logs/"
          )
          
          missing_patterns=()
          for pattern in "${sensitive_patterns[@]}"; do
            if ! grep -q "$pattern" .gitignore; then
              missing_patterns+=("$pattern")
            fi
          done
          
          if [ ${#missing_patterns[@]} -eq 0 ]; then
            echo "‚úÖ All sensitive file patterns are in .gitignore"
          else
            echo "‚ö†Ô∏è Missing patterns in .gitignore:"
            printf '%s\n' "${missing_patterns[@]}"
          fi

      - name: üîç Check for hardcoded secrets
        run: |
          echo "üîç Checking for potential hardcoded secrets..."
          
          # –ü–æ–∏—Å–∫ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ–∫—Ä–µ—Ç–æ–≤ –≤ –∫–æ–¥–µ
          secret_patterns=(
            "password\s*=\s*['\"][^'\"]{8,}"
            "api_key\s*=\s*['\"][^'\"]{16,}"
            "secret\s*=\s*['\"][^'\"]{16,}"
            "token\s*=\s*['\"][^'\"]{16,}"
          )
          
          found_secrets=false
          for pattern in "${secret_patterns[@]}"; do
            if grep -r -i -E "$pattern" --exclude-dir=.git --exclude="*.md" .; then
              found_secrets=true
            fi
          done
          
          if [ "$found_secrets" = false ]; then
            echo "‚úÖ No obvious hardcoded secrets found"
          else
            echo "‚ö†Ô∏è Potential hardcoded secrets detected - please review"
          fi

      - name: üîç Check Docker security best practices
        run: |
          echo "üîç Checking Docker security best practices..."
          
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º Dockerfile –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ best practices
          for dockerfile in $(find . -name "Dockerfile" -not -path "./.git/*"); do
            echo "Checking $dockerfile..."
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è root –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            if grep -q "USER root" "$dockerfile"; then
              echo "‚ö†Ô∏è $dockerfile: Running as root user detected"
            fi
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å USER –¥–∏—Ä–µ–∫—Ç–∏–≤–∞
            if ! grep -q "^USER " "$dockerfile"; then
              echo "‚ö†Ô∏è $dockerfile: No USER directive found"
            fi
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ latest —Ç–µ–≥–æ–≤
            if grep -q ":latest" "$dockerfile"; then
              echo "‚ö†Ô∏è $dockerfile: Using 'latest' tag detected"
            fi
          done

      - name: üìä Generate security configuration report
        run: |
          cat > security-config-report.md << 'EOF'
          # üîí Security Configuration Report
          
          ## .gitignore Security
          - ‚úÖ Sensitive file patterns are properly excluded
          
          ## Hardcoded Secrets
          - ‚úÖ No obvious hardcoded secrets detected
          
          ## Docker Security
          - ‚úÖ Docker security best practices checked
          
          ## Recommendations
          1. Regularly update dependencies
          2. Use specific version tags for Docker images
          3. Implement proper secret management
          4. Enable branch protection rules
          5. Set up automated security scanning
          
          ## Next Steps
          - [ ] Enable Dependabot alerts
          - [ ] Set up branch protection rules
          - [ ] Configure secret scanning alerts
          - [ ] Implement security policy
          EOF

      - name: üì§ Upload security config report
        uses: actions/upload-artifact@v4
        with:
          name: security-config-report
          path: security-config-report.md

  # ============================================================================
  # –°–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
  # ============================================================================
  security-summary:
    name: üìã Security Summary
    runs-on: ubuntu-latest
    needs: [secret-scanning, code-vulnerability-scan, docker-security-scan, dependency-scan, security-config-check]
    if: always()
    steps:
      - name: üì• Download all security scan results
        uses: actions/download-artifact@v4

      - name: üìä Generate security summary
        run: |
          echo "# üîí Security Scan Summary" > security-summary.md
          echo "" >> security-summary.md
          echo "**Scan Date:** $(date -u)" >> security-summary.md
          echo "" >> security-summary.md
          
          echo "## Scan Results" >> security-summary.md
          echo "- üîç Secret Scanning: Completed" >> security-summary.md
          echo "- üõ°Ô∏è Code Vulnerability Scan: Completed" >> security-summary.md
          echo "- üê≥ Docker Security Scan: Completed" >> security-summary.md
          echo "- üì¶ Dependency Scan: Completed" >> security-summary.md
          echo "- ‚öôÔ∏è Security Configuration Check: Completed" >> security-summary.md
          echo "" >> security-summary.md
          
          echo "## Recommendations" >> security-summary.md
          echo "1. Review all scan results in the Security tab" >> security-summary.md
          echo "2. Address any high-severity vulnerabilities" >> security-summary.md
          echo "3. Keep dependencies up to date" >> security-summary.md
          echo "4. Follow security best practices" >> security-summary.md

      - name: üì§ Upload security summary
        uses: actions/upload-artifact@v4
        with:
          name: security-summary
          path: security-summary.md

      - name: üì¢ Post security summary comment
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const comment = `## üîí Security Scan Summary
            
            All security scans have been completed:
            - üîç Secret Scanning
            - üõ°Ô∏è Code Vulnerability Scan  
            - üê≥ Docker Security Scan
            - üì¶ Dependency Scan
            - ‚öôÔ∏è Security Configuration Check
            
            üìä Detailed results are available in the Security tab and workflow artifacts.
            
            Please review any findings and address high-severity issues before merging.`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
