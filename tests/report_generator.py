#!/usr/bin/env python3
"""
–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Open WebUI Hub
–°–æ–∑–¥–∞–µ—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –æ—Ç—á–µ—Ç —Å –∞–Ω–∞–ª–∏–∑–æ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
"""

import json
import os
from datetime import datetime
from typing import Dict, List, Any
import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd
from jinja2 import Template

class ABTestingReportGenerator:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ—Ç—á–µ—Ç–æ–≤ A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    def __init__(self, results_file: str):
        self.results_file = results_file
        self.results = self._load_results()
        self.report_dir = "tests/reports"
        os.makedirs(self.report_dir, exist_ok=True)
    
    def _load_results(self) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            with open(self.results_file, 'r', encoding='utf-8') as f:
                return json.load(f)
        except Exception as e:
            raise Exception(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
    
    def generate_comprehensive_report(self) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        report_filename = f"{self.report_dir}/ab_testing_report_{timestamp}.html"
        
        # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        analysis = self._analyze_results()
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
        charts = self._generate_charts()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ HTML –æ—Ç—á–µ—Ç–∞
        html_content = self._create_html_report(analysis, charts)
        
        with open(report_filename, 'w', encoding='utf-8') as f:
            f.write(html_content)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∑—é–º–µ
        summary_filename = f"{self.report_dir}/ab_testing_summary_{timestamp}.md"
        summary_content = self._create_summary_report(analysis)
        
        with open(summary_filename, 'w', encoding='utf-8') as f:
            f.write(summary_content)
        
        print(f"üìä –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: {report_filename}")
        print(f"üìã –ö—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ —Å–æ–∑–¥–∞–Ω–æ: {summary_filename}")
        
        return report_filename
    
    def _analyze_results(self) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        analysis = {
            'overall_health': self._analyze_system_health(),
            'performance_analysis': self._analyze_performance(),
            'cache_analysis': self._analyze_caching(),
            'integration_analysis': self._analyze_integration(),
            'llm_analysis': self._analyze_llm_performance(),
            'recommendations': self._generate_recommendations(),
            'compliance': self._check_target_compliance()
        }
        
        return analysis
    
    def _analyze_system_health(self) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"""
        health_data = self.results.get('health_check', {})
        
        total_services = len(health_data)
        healthy_services = sum(1 for service in health_data.values() 
                             if isinstance(service, dict) and service.get('is_healthy', False))
        
        health_percentage = (healthy_services / total_services * 100) if total_services > 0 else 0
        
        service_details = []
        for service_name, metrics in health_data.items():
            if isinstance(metrics, dict):
                service_details.append({
                    'name': service_name,
                    'healthy': metrics.get('is_healthy', False),
                    'response_time': metrics.get('response_time_ms', -1),
                    'container_status': metrics.get('container_status', 'unknown'),
                    'error': metrics.get('error_message')
                })
        
        return {
            'total_services': total_services,
            'healthy_services': healthy_services,
            'health_percentage': health_percentage,
            'service_details': service_details,
            'status': 'excellent' if health_percentage >= 95 else 
                     'good' if health_percentage >= 80 else 
                     'warning' if health_percentage >= 60 else 'critical'
        }
    
    def _analyze_performance(self) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        performance_data = self.results.get('performance_metrics', [])
        
        if not performance_data:
            return {'status': 'no_data', 'message': '–î–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç'}
        
        # –ê–≥—Ä–µ–≥–∞—Ü–∏—è –º–µ—Ç—Ä–∏–∫ –ø–æ —Å–µ—Ä–≤–∏—Å–∞–º
        service_performance = {}
        total_avg_response = 0
        total_success_rate = 0
        
        for metrics in performance_data:
            if isinstance(metrics, dict):
                service_name = metrics.get('service_name', 'unknown')
                
                service_performance[service_name] = {
                    'avg_response_time': metrics.get('avg_response_time', 0),
                    'p95_response_time': metrics.get('p95_response_time', 0),
                    'p99_response_time': metrics.get('p99_response_time', 0),
                    'success_rate': metrics.get('success_rate', 0),
                    'total_requests': metrics.get('total_requests', 0),
                    'error_count': metrics.get('error_count', 0),
                    'cpu_usage': metrics.get('cpu_usage', 0),
                    'memory_usage_mb': metrics.get('memory_usage_mb', 0)
                }
                
                total_avg_response += metrics.get('avg_response_time', 0)
                total_success_rate += metrics.get('success_rate', 0)
        
        avg_response_time = total_avg_response / len(performance_data) if performance_data else 0
        avg_success_rate = total_success_rate / len(performance_data) if performance_data else 0
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        performance_status = 'excellent' if avg_response_time <= 50 and avg_success_rate >= 0.95 else \
                           'good' if avg_response_time <= 100 and avg_success_rate >= 0.90 else \
                           'warning' if avg_response_time <= 200 and avg_success_rate >= 0.80 else 'critical'
        
        return {
            'status': performance_status,
            'avg_response_time': avg_response_time,
            'avg_success_rate': avg_success_rate,
            'service_performance': service_performance,
            'total_services_tested': len(performance_data)
        }
    
    def _analyze_caching(self) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è"""
        cache_data = self.results.get('cache_metrics', {})
        
        if not cache_data:
            return {'status': 'no_data', 'message': '–î–∞–Ω–Ω—ã–µ –æ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç'}
        
        hit_rate = cache_data.get('hit_rate', 0)
        miss_rate = cache_data.get('miss_rate', 0)
        used_memory_mb = cache_data.get('used_memory_mb', 0)
        ops_per_second = cache_data.get('operations_per_second', 0)
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
        cache_status = 'excellent' if hit_rate >= 0.90 else \
                      'good' if hit_rate >= 0.75 else \
                      'warning' if hit_rate >= 0.50 else 'critical'
        
        return {
            'status': cache_status,
            'hit_rate': hit_rate,
            'miss_rate': miss_rate,
            'hit_rate_percentage': hit_rate * 100,
            'used_memory_mb': used_memory_mb,
            'operations_per_second': ops_per_second,
            'efficiency': '–≤—ã—Å–æ–∫–∞—è' if hit_rate >= 0.90 else 
                         '—Å—Ä–µ–¥–Ω—è—è' if hit_rate >= 0.75 else '–Ω–∏–∑–∫–∞—è'
        }
    
    def _analyze_integration(self) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        integration_data = self.results.get('integration_results', {})
        
        if not integration_data:
            return {'status': 'no_data', 'message': '–î–∞–Ω–Ω—ã–µ –æ–± –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç'}
        
        # –ê–Ω–∞–ª–∏–∑ Nginx –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏
        nginx_results = integration_data.get('nginx_routing', {})
        nginx_success_count = sum(1 for result in nginx_results.values() 
                                if isinstance(result, dict) and result.get('success', False))
        nginx_total = len(nginx_results)
        
        # –ê–Ω–∞–ª–∏–∑ service discovery
        discovery_results = integration_data.get('service_discovery', {})
        discovery_success = discovery_results.get('success', False)
        
        # –ê–Ω–∞–ª–∏–∑ health check —Ü–µ–ø–æ—á–∫–∏
        health_chain = integration_data.get('health_checks', {})
        health_chain_success = health_chain.get('success', False)
        health_percentage = health_chain.get('health_percentage', 0)
        
        # –ê–Ω–∞–ª–∏–∑ Docker –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
        docker_results = integration_data.get('docker_integration', {})
        docker_success = docker_results.get('success', False)
        running_containers = docker_results.get('running_containers', 0)
        total_containers = docker_results.get('total_containers', 0)
        
        # –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
        integration_score = 0
        if nginx_total > 0:
            integration_score += (nginx_success_count / nginx_total) * 25
        if discovery_success:
            integration_score += 25
        if health_chain_success:
            integration_score += 25
        if docker_success:
            integration_score += 25
        
        integration_status = 'excellent' if integration_score >= 90 else \
                           'good' if integration_score >= 75 else \
                           'warning' if integration_score >= 50 else 'critical'
        
        return {
            'status': integration_status,
            'integration_score': integration_score,
            'nginx_routing': {
                'success_rate': (nginx_success_count / nginx_total * 100) if nginx_total > 0 else 0,
                'details': nginx_results
            },
            'service_discovery': {
                'success': discovery_success,
                'discovered_services': discovery_results.get('discovered_services', 0)
            },
            'health_chain': {
                'success': health_chain_success,
                'health_percentage': health_percentage,
                'healthy_services': health_chain.get('healthy_services', 0),
                'total_services': health_chain.get('total_services', 0)
            },
            'docker_integration': {
                'success': docker_success,
                'running_containers': running_containers,
                'total_containers': total_containers,
                'container_health_rate': (running_containers / total_containers * 100) if total_containers > 0 else 0
            }
        }
    
    def _analyze_llm_performance(self) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ LLM"""
        llm_data = self.results.get('llm_performance', {})
        
        if not llm_data:
            return {'status': 'no_data', 'message': '–î–∞–Ω–Ω—ã–µ –æ LLM –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç'}
        
        # –ê–Ω–∞–ª–∏–∑ –∑–¥–æ—Ä–æ–≤—å—è LiteLLM
        health_check = llm_data.get('health_check', {})
        health_success = health_check.get('success', False)
        
        # –ê–Ω–∞–ª–∏–∑ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π
        model_listing = llm_data.get('model_listing', {})
        models_available = model_listing.get('total_models', 0)
        
        # –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
        provider_performance = llm_data.get('provider_performance', {})
        successful_providers = sum(1 for result in provider_performance.values() 
                                 if isinstance(result, dict) and result.get('success', False))
        total_providers = len(provider_performance)
        
        # –ê–Ω–∞–ª–∏–∑ fallback –º–µ—Ö–∞–Ω–∏–∑–º–æ–≤
        fallback_results = llm_data.get('fallback_mechanism', {})
        fallback_tested = fallback_results.get('fallback_tested', False)
        
        # –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å LLM
        llm_score = 0
        if health_success:
            llm_score += 30
        if models_available > 0:
            llm_score += 30
        if total_providers > 0:
            llm_score += (successful_providers / total_providers) * 30
        if fallback_tested:
            llm_score += 10
        
        llm_status = 'excellent' if llm_score >= 90 else \
                    'good' if llm_score >= 75 else \
                    'warning' if llm_score >= 50 else 'critical'
        
        return {
            'status': llm_status,
            'llm_score': llm_score,
            'health_check': health_success,
            'models_available': models_available,
            'provider_success_rate': (successful_providers / total_providers * 100) if total_providers > 0 else 0,
            'fallback_tested': fallback_tested,
            'provider_details': provider_performance
        }

    def _generate_recommendations(self) -> List[Dict[str, Any]]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
        recommendations = []

        # –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        performance_data = self.results.get('performance_metrics', [])
        cache_data = self.results.get('cache_metrics', {})
        health_data = self.results.get('health_check', {})

        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        for metrics in performance_data:
            if isinstance(metrics, dict):
                service_name = metrics.get('service_name', 'unknown')
                avg_response = metrics.get('avg_response_time', 0)
                success_rate = metrics.get('success_rate', 0)
                cpu_usage = metrics.get('cpu_usage', 0)
                memory_usage = metrics.get('memory_usage_mb', 0)

                if avg_response > 50:
                    recommendations.append({
                        'priority': 'high',
                        'category': 'performance',
                        'service': service_name,
                        'issue': f'–í—ã—Å–æ–∫–æ–µ –≤—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞: {avg_response:.1f}ms',
                        'recommendation': '–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤, –¥–æ–±–∞–≤–∏—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ',
                        'target': '< 50ms',
                        'impact': '–£–ª—É—á—à–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ–ø—ã—Ç–∞'
                    })

                if success_rate < 0.95:
                    recommendations.append({
                        'priority': 'critical',
                        'category': 'reliability',
                        'service': service_name,
                        'issue': f'–ù–∏–∑–∫–∞—è —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–æ–≤: {success_rate:.1%}',
                        'recommendation': '–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –ø—Ä–∏—á–∏–Ω—ã –æ—à–∏–±–æ–∫, —É–ª—É—á—à–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –∏—Å–∫–ª—é—á–µ–Ω–∏–π',
                        'target': '> 95%',
                        'impact': '–ü–æ–≤—ã—à–µ–Ω–∏–µ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã'
                    })

                if cpu_usage > 0.05:  # 5%
                    recommendations.append({
                        'priority': 'medium',
                        'category': 'resources',
                        'service': service_name,
                        'issue': f'–í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ CPU: {cpu_usage:.1%}',
                        'recommendation': '–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º—ã, —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ',
                        'target': '< 5%',
                        'impact': '–°–Ω–∏–∂–µ–Ω–∏–µ –Ω–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ —Å–∏—Å—Ç–µ–º—É'
                    })

                if memory_usage > 100:  # 100MB
                    recommendations.append({
                        'priority': 'medium',
                        'category': 'resources',
                        'service': service_name,
                        'issue': f'–í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {memory_usage:.1f}MB',
                        'recommendation': '–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏, –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —É—Ç–µ—á–∫–∏',
                        'target': '< 100MB',
                        'impact': '–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤'
                    })

        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—é
        if cache_data:
            hit_rate = cache_data.get('hit_rate', 0)
            if hit_rate < 0.90:
                recommendations.append({
                    'priority': 'high',
                    'category': 'caching',
                    'service': 'redis',
                    'issue': f'–ù–∏–∑–∫–∏–π hit rate –∫—ç—à–∞: {hit_rate:.1%}',
                    'recommendation': '–ü–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è, —É–≤–µ–ª–∏—á–∏—Ç—å TTL –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö',
                    'target': '> 90%',
                    'impact': '–ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏'
                })

        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∑–¥–æ—Ä–æ–≤—å—é —Å–µ—Ä–≤–∏—Å–æ–≤
        unhealthy_services = []
        for service_name, metrics in health_data.items():
            if isinstance(metrics, dict) and not metrics.get('is_healthy', False):
                unhealthy_services.append(service_name)

        if unhealthy_services:
            recommendations.append({
                'priority': 'critical',
                'category': 'health',
                'service': ', '.join(unhealthy_services),
                'issue': f'–ù–µ–∑–¥–æ—Ä–æ–≤—ã–µ —Å–µ—Ä–≤–∏—Å—ã: {len(unhealthy_services)}',
                'recommendation': '–ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –∏ —É—Å—Ç—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ä–≤–∏—Å–∞–º–∏',
                'target': '100% –∑–¥–æ—Ä–æ–≤—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤',
                'impact': '–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã'
            })

        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
        priority_order = {'critical': 0, 'high': 1, 'medium': 2, 'low': 3}
        recommendations.sort(key=lambda x: priority_order.get(x['priority'], 3))

        return recommendations

    def _check_target_compliance(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ü–µ–ª–µ–≤—ã–º –º–µ—Ç—Ä–∏–∫–∞–º"""
        compliance = {
            'response_time': {'target': 50, 'status': 'unknown', 'actual': 0},
            'cache_hit_rate': {'target': 90, 'status': 'unknown', 'actual': 0},
            'cpu_usage': {'target': 5, 'status': 'unknown', 'actual': 0},
            'memory_usage': {'target': 100, 'status': 'unknown', 'actual': 0},
            'success_rate': {'target': 95, 'status': 'unknown', 'actual': 0}
        }

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–∫–ª–∏–∫–∞
        performance_data = self.results.get('performance_metrics', [])
        if performance_data:
            avg_response_times = [m.get('avg_response_time', 0) for m in performance_data if isinstance(m, dict)]
            if avg_response_times:
                actual_response_time = sum(avg_response_times) / len(avg_response_times)
                compliance['response_time']['actual'] = actual_response_time
                compliance['response_time']['status'] = 'pass' if actual_response_time <= 50 else 'fail'

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ hit rate –∫—ç—à–∞
        cache_data = self.results.get('cache_metrics', {})
        if cache_data:
            hit_rate = cache_data.get('hit_rate', 0) * 100
            compliance['cache_hit_rate']['actual'] = hit_rate
            compliance['cache_hit_rate']['status'] = 'pass' if hit_rate >= 90 else 'fail'

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è CPU
        if performance_data:
            cpu_usages = [m.get('cpu_usage', 0) * 100 for m in performance_data if isinstance(m, dict)]
            if cpu_usages:
                actual_cpu = sum(cpu_usages) / len(cpu_usages)
                compliance['cpu_usage']['actual'] = actual_cpu
                compliance['cpu_usage']['status'] = 'pass' if actual_cpu <= 5 else 'fail'

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏
        if performance_data:
            memory_usages = [m.get('memory_usage_mb', 0) for m in performance_data if isinstance(m, dict)]
            if memory_usages:
                actual_memory = sum(memory_usages) / len(memory_usages)
                compliance['memory_usage']['actual'] = actual_memory
                compliance['memory_usage']['status'] = 'pass' if actual_memory <= 100 else 'fail'

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
        if performance_data:
            success_rates = [m.get('success_rate', 0) * 100 for m in performance_data if isinstance(m, dict)]
            if success_rates:
                actual_success_rate = sum(success_rates) / len(success_rates)
                compliance['success_rate']['actual'] = actual_success_rate
                compliance['success_rate']['status'] = 'pass' if actual_success_rate >= 95 else 'fail'

        # –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è
        passed_checks = sum(1 for check in compliance.values() if check['status'] == 'pass')
        total_checks = len([check for check in compliance.values() if check['status'] != 'unknown'])

        overall_compliance = (passed_checks / total_checks * 100) if total_checks > 0 else 0

        return {
            'overall_compliance': overall_compliance,
            'passed_checks': passed_checks,
            'total_checks': total_checks,
            'details': compliance
        }

    def _generate_charts(self) -> Dict[str, str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ –¥–ª—è –æ—Ç—á–µ—Ç–∞"""
        charts = {}

        try:
            # –ì—Ä–∞—Ñ–∏–∫ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–∫–ª–∏–∫–∞ –ø–æ —Å–µ—Ä–≤–∏—Å–∞–º
            performance_data = self.results.get('performance_metrics', [])
            if performance_data:
                services = []
                response_times = []

                for metrics in performance_data:
                    if isinstance(metrics, dict):
                        services.append(metrics.get('service_name', 'unknown'))
                        response_times.append(metrics.get('avg_response_time', 0))

                if services and response_times:
                    plt.figure(figsize=(10, 6))
                    bars = plt.bar(services, response_times, color='skyblue')
                    plt.axhline(y=50, color='red', linestyle='--', label='–¶–µ–ª–µ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (50ms)')
                    plt.title('–í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞ –ø–æ —Å–µ—Ä–≤–∏—Å–∞–º')
                    plt.xlabel('–°–µ—Ä–≤–∏—Å—ã')
                    plt.ylabel('–í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞ (ms)')
                    plt.xticks(rotation=45)
                    plt.legend()
                    plt.tight_layout()

                    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –Ω–∞ —Å—Ç–æ–ª–±—Ü—ã
                    for bar, value in zip(bars, response_times):
                        plt.text(bar.get_x() + bar.get_width()/2, bar.get_height() + 1,
                                f'{value:.1f}ms', ha='center', va='bottom')

                    chart_path = f"{self.report_dir}/response_times_chart.png"
                    plt.savefig(chart_path, dpi=300, bbox_inches='tight')
                    plt.close()
                    charts['response_times'] = chart_path

            # –ì—Ä–∞—Ñ–∏–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ü–µ–ª–µ–≤—ã–º –º–µ—Ç—Ä–∏–∫–∞–º
            compliance_data = self._check_target_compliance()
            if compliance_data['details']:
                metrics_names = []
                actual_values = []
                target_values = []
                statuses = []

                for metric_name, data in compliance_data['details'].items():
                    if data['status'] != 'unknown':
                        metrics_names.append(metric_name.replace('_', ' ').title())
                        actual_values.append(data['actual'])
                        target_values.append(data['target'])
                        statuses.append(data['status'])

                if metrics_names:
                    fig, ax = plt.subplots(figsize=(12, 6))
                    x = range(len(metrics_names))

                    # –°—Ç–æ–ª–±—Ü—ã –¥–ª—è —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –∏ —Ü–µ–ª–µ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
                    width = 0.35
                    bars1 = ax.bar([i - width/2 for i in x], actual_values, width,
                                  label='–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è', alpha=0.8)
                    bars2 = ax.bar([i + width/2 for i in x], target_values, width,
                                  label='–¶–µ–ª–µ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è', alpha=0.8)

                    # –¶–≤–µ—Ç–æ–≤–∞—è –∫–æ–¥–∏—Ä–æ–≤–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å—É
                    for i, (bar, status) in enumerate(zip(bars1, statuses)):
                        bar.set_color('green' if status == 'pass' else 'red')

                    ax.set_xlabel('–ú–µ—Ç—Ä–∏–∫–∏')
                    ax.set_ylabel('–ó–Ω–∞—á–µ–Ω–∏—è')
                    ax.set_title('–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ü–µ–ª–µ–≤—ã–º –º–µ—Ç—Ä–∏–∫–∞–º')
                    ax.set_xticks(x)
                    ax.set_xticklabels(metrics_names, rotation=45)
                    ax.legend()

                    plt.tight_layout()
                    chart_path = f"{self.report_dir}/compliance_chart.png"
                    plt.savefig(chart_path, dpi=300, bbox_inches='tight')
                    plt.close()
                    charts['compliance'] = chart_path

        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤: {e}")

        return charts

    def _create_html_report(self, analysis: Dict[str, Any], charts: Dict[str, str]) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ HTML –æ—Ç—á–µ—Ç–∞"""
        html_template = """
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–û—Ç—á–µ—Ç A/B –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Open WebUI Hub</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; line-height: 1.6; }
        .header { background: #2c3e50; color: white; padding: 20px; border-radius: 5px; }
        .section { margin: 20px 0; padding: 15px; border: 1px solid #ddd; border-radius: 5px; }
        .status-excellent { background-color: #d4edda; border-color: #c3e6cb; }
        .status-good { background-color: #d1ecf1; border-color: #bee5eb; }
        .status-warning { background-color: #fff3cd; border-color: #ffeaa7; }
        .status-critical { background-color: #f8d7da; border-color: #f5c6cb; }
        .metric { display: inline-block; margin: 10px; padding: 10px; border-radius: 5px; background: #f8f9fa; }
        .recommendation { margin: 10px 0; padding: 10px; border-left: 4px solid #007bff; background: #f8f9fa; }
        .priority-critical { border-left-color: #dc3545; }
        .priority-high { border-left-color: #fd7e14; }
        .priority-medium { border-left-color: #ffc107; }
        .priority-low { border-left-color: #28a745; }
        table { width: 100%; border-collapse: collapse; margin: 10px 0; }
        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
        th { background-color: #f2f2f2; }
        .chart { text-align: center; margin: 20px 0; }
        .chart img { max-width: 100%; height: auto; }
    </style>
</head>
<body>
    <div class="header">
        <h1>üöÄ –û—Ç—á–µ—Ç A/B –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Open WebUI Hub</h1>
        <p>–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {{ timestamp }}</p>
        <p>–û–±—â–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {{ test_duration }} —Å–µ–∫—É–Ω–¥</p>
    </div>

    <!-- –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã -->
    <div class="section status-{{ overall_status }}">
        <h2>üìä –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã</h2>
        <div class="metric">
            <strong>–ó–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã:</strong> {{ health_percentage }}%
        </div>
        <div class="metric">
            <strong>–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</strong> {{ performance_status }}
        </div>
        <div class="metric">
            <strong>–ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ:</strong> {{ cache_status }}
        </div>
        <div class="metric">
            <strong>–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è:</strong> {{ integration_status }}
        </div>
    </div>

    <!-- –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–¥–æ—Ä–æ–≤—å—è -->
    <div class="section">
        <h2>üè• –ê–Ω–∞–ª–∏–∑ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–æ–≤</h2>
        <p><strong>–ó–¥–æ—Ä–æ–≤—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤:</strong> {{ health_analysis.healthy_services }}/{{ health_analysis.total_services }}</p>
        <table>
            <tr><th>–°–µ—Ä–≤–∏—Å</th><th>–°—Ç–∞—Ç—É—Å</th><th>–í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞ (ms)</th><th>–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä</th><th>–û—à–∏–±–∫–∞</th></tr>
            {% for service in health_analysis.service_details %}
            <tr>
                <td>{{ service.name }}</td>
                <td>{{ '‚úÖ –ó–¥–æ—Ä–æ–≤' if service.healthy else '‚ùå –ù–µ–∑–¥–æ—Ä–æ–≤' }}</td>
                <td>{{ service.response_time if service.response_time > 0 else 'N/A' }}</td>
                <td>{{ service.container_status }}</td>
                <td>{{ service.error or '–ù–µ—Ç' }}</td>
            </tr>
            {% endfor %}
        </table>
    </div>

    <!-- –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ -->
    <div class="section">
        <h2>‚ö° –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏</h2>
        <p><strong>–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞:</strong> {{ performance_analysis.avg_response_time }}ms</p>
        <p><strong>–°—Ä–µ–¥–Ω—è—è —É—Å–ø–µ—à–Ω–æ—Å—Ç—å:</strong> {{ (performance_analysis.avg_success_rate * 100) }}%</p>

        {% if charts.response_times %}
        <div class="chart">
            <img src="{{ charts.response_times }}" alt="–ì—Ä–∞—Ñ–∏–∫ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–∫–ª–∏–∫–∞">
        </div>
        {% endif %}

        <table>
            <tr><th>–°–µ—Ä–≤–∏—Å</th><th>–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è (ms)</th><th>P95 (ms)</th><th>–£—Å–ø–µ—à–Ω–æ—Å—Ç—å</th><th>CPU %</th><th>–ü–∞–º—è—Ç—å (MB)</th></tr>
            {% for service, metrics in performance_analysis.service_performance.items() %}
            <tr>
                <td>{{ service }}</td>
                <td>{{ metrics.avg_response_time }}</td>
                <td>{{ metrics.p95_response_time }}</td>
                <td>{{ (metrics.success_rate * 100) }}%</td>
                <td>{{ (metrics.cpu_usage * 100) }}%</td>
                <td>{{ metrics.memory_usage_mb }}</td>
            </tr>
            {% endfor %}
        </table>
    </div>

    <!-- –ê–Ω–∞–ª–∏–∑ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è -->
    <div class="section">
        <h2>üîÑ –ê–Ω–∞–ª–∏–∑ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è</h2>
        <p><strong>Hit Rate:</strong> {{ cache_analysis.hit_rate_percentage }}%</p>
        <p><strong>–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</strong> {{ cache_analysis.efficiency }}</p>
        <p><strong>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏:</strong> {{ cache_analysis.used_memory_mb }}MB</p>
        <p><strong>–û–ø–µ—Ä–∞—Ü–∏–π –≤ —Å–µ–∫—É–Ω–¥—É:</strong> {{ cache_analysis.operations_per_second }}</p>
    </div>

    <!-- –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ü–µ–ª–µ–≤—ã–º –º–µ—Ç—Ä–∏–∫–∞–º -->
    <div class="section">
        <h2>üéØ –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ü–µ–ª–µ–≤—ã–º –º–µ—Ç—Ä–∏–∫–∞–º</h2>
        <p><strong>–û–±—â–µ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ:</strong> {{ compliance.overall_compliance }}%</p>

        {% if charts.compliance %}
        <div class="chart">
            <img src="{{ charts.compliance }}" alt="–ì—Ä–∞—Ñ–∏–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –º–µ—Ç—Ä–∏–∫–∞–º">
        </div>
        {% endif %}

        <table>
            <tr><th>–ú–µ—Ç—Ä–∏–∫–∞</th><th>–¶–µ–ª–µ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ</th><th>–§–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ</th><th>–°—Ç–∞—Ç—É—Å</th></tr>
            {% for metric, data in compliance.details.items() %}
            {% if data.status != 'unknown' %}
            <tr>
                <td>{{ metric.replace('_', ' ').title() }}</td>
                <td>{{ data.target }}</td>
                <td>{{ data.actual }}</td>
                <td>{{ '‚úÖ –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç' if data.status == 'pass' else '‚ùå –ù–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç' }}</td>
            </tr>
            {% endif %}
            {% endfor %}
        </table>
    </div>

    <!-- –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ -->
    <div class="section">
        <h2>üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏</h2>
        {% for rec in recommendations %}
        <div class="recommendation priority-{{ rec.priority }}">
            <h4>{{ rec.category.title() }} - {{ rec.service }}</h4>
            <p><strong>–ü—Ä–æ–±–ª–µ–º–∞:</strong> {{ rec.issue }}</p>
            <p><strong>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:</strong> {{ rec.recommendation }}</p>
            <p><strong>–¶–µ–ª–µ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:</strong> {{ rec.target }}</p>
            <p><strong>–í–ª–∏—è–Ω–∏–µ:</strong> {{ rec.impact }}</p>
            <p><strong>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</strong> {{ rec.priority.upper() }}</p>
        </div>
        {% endfor %}
    </div>

    <div class="section">
        <h2>üìà –ó–∞–∫–ª—é—á–µ–Ω–∏–µ</h2>
        <p>–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã: <strong>{{ overall_status.upper() }}</strong></p>
        <p>–î–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å {{ recommendations|length }} –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π.</p>
    </div>
</body>
</html>
        """

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —à–∞–±–ª–æ–Ω–∞
        template_data = {
            'timestamp': datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            'test_duration': self.results.get('test_duration', 0),
            'overall_status': self._get_overall_status(analysis),
            'health_percentage': analysis['overall_health']['health_percentage'],
            'performance_status': analysis['performance_analysis']['status'],
            'cache_status': analysis['cache_analysis']['status'],
            'integration_status': analysis['integration_analysis']['status'],
            'health_analysis': analysis['overall_health'],
            'performance_analysis': analysis['performance_analysis'],
            'cache_analysis': analysis['cache_analysis'],
            'compliance': analysis['compliance'],
            'recommendations': analysis['recommendations'],
            'charts': charts
        }

        # –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —à–∞–±–ª–æ–Ω–∞
        template = Template(html_template)
        return template.render(**template_data)

    def _create_summary_report(self, analysis: Dict[str, Any]) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫—Ä–∞—Ç–∫–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown"""
        summary = f"""# üìä –ö—Ä–∞—Ç–∫–∏–π –æ—Ç—á–µ—Ç A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Open WebUI Hub

**–î–∞—Ç–∞:** {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}
**–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:** {self.results.get('test_duration', 0):.1f} —Å–µ–∫—É–Ω–¥

## üéØ –û–±—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã

- **–û–±—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:** {self._get_overall_status(analysis).upper()}
- **–ó–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã:** {analysis['overall_health']['health_percentage']:.1f}%
- **–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ü–µ–ª–µ–≤—ã–º –º–µ—Ç—Ä–∏–∫–∞–º:** {analysis['compliance']['overall_compliance']:.1f}%

## üìà –ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏

### –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
- **–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞:** {analysis['performance_analysis'].get('avg_response_time', 0):.1f}ms (—Ü–µ–ª—å: <50ms)
- **–£—Å–ø–µ—à–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–æ–≤:** {analysis['performance_analysis'].get('avg_success_rate', 0)*100:.1f}% (—Ü–µ–ª—å: >95%)

### –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
- **Hit Rate:** {analysis['cache_analysis'].get('hit_rate_percentage', 0):.1f}% (—Ü–µ–ª—å: >90%)
- **–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:** {analysis['cache_analysis'].get('efficiency', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}

### –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
- **–û—Ü–µ–Ω–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏:** {analysis['integration_analysis'].get('integration_score', 0):.1f}/100

## ‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã

"""

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        critical_recommendations = [r for r in analysis['recommendations'] if r['priority'] == 'critical']
        if critical_recommendations:
            for rec in critical_recommendations:
                summary += f"- **{rec['service']}:** {rec['issue']} - {rec['recommendation']}\n"
        else:
            summary += "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ.\n"

        summary += f"""
## üí° –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏

"""

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–ø-5 —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        top_recommendations = analysis['recommendations'][:5]
        for i, rec in enumerate(top_recommendations, 1):
            summary += f"{i}. **[{rec['priority'].upper()}]** {rec['service']}: {rec['recommendation']}\n"

        summary += f"""
## üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

### –ó–¥–æ—Ä–æ–≤—å–µ —Å–µ—Ä–≤–∏—Å–æ–≤
- –í—Å–µ–≥–æ —Å–µ—Ä–≤–∏—Å–æ–≤: {analysis['overall_health']['total_services']}
- –ó–¥–æ—Ä–æ–≤—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤: {analysis['overall_health']['healthy_services']}
- –ü—Ä–æ—Ü–µ–Ω—Ç –∑–¥–æ—Ä–æ–≤—ã—Ö: {analysis['overall_health']['health_percentage']:.1f}%

### –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ü–µ–ª—è–º
"""

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ü–µ–ª—è–º
        for metric, data in analysis['compliance']['details'].items():
            if data['status'] != 'unknown':
                status_icon = '‚úÖ' if data['status'] == 'pass' else '‚ùå'
                summary += f"- {metric.replace('_', ' ').title()}: {status_icon} {data['actual']:.1f} (—Ü–µ–ª—å: {data['target']})\n"

        summary += f"""
---
*–û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∏—Å—Ç–µ–º–æ–π A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Open WebUI Hub*
"""

        return summary

    def _get_overall_status(self, analysis: Dict[str, Any]) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–±—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã"""
        statuses = [
            analysis['overall_health']['status'],
            analysis['performance_analysis']['status'],
            analysis['cache_analysis']['status'],
            analysis['integration_analysis']['status']
        ]

        if 'critical' in statuses:
            return 'critical'
        elif 'warning' in statuses:
            return 'warning'
        elif 'good' in statuses:
            return 'good'
        else:
            return 'excellent'
