#!/usr/bin/env python3
"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤ Open WebUI Hub
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –º–µ–∂–¥—É —Å–µ—Ä–≤–∏—Å–∞–º–∏, Nginx routing, Docker –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é
"""

import asyncio
import aiohttp
import docker
import time
import json
import sys
import subprocess
from datetime import datetime
from typing import Dict, Any, Optional
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class IntegrationTester:
    """–¢–µ—Å—Ç–µ—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤"""
    
    def __init__(self):
        self.docker_client = None
        self.services_config = {
            'hub': {'port': 5003, 'health_path': '/api/health'},
            'openwebui': {'port': 3000, 'health_path': '/'},
            'litellm': {'port': 4000, 'health_path': '/health'},
            'ollama': {'port': 11435, 'health_path': '/'},
            'redis': {'port': 6379, 'health_path': None},
            'db': {'port': 5432, 'health_path': None},
            'nginx': {'port': 80, 'health_path': '/'},
            'auth': {'port': 9090, 'health_path': '/health'},
            'docling': {'port': 5001, 'health_path': '/health'},
            'tika': {'port': 9998, 'health_path': '/'},
            'edgetts': {'port': 5050, 'health_path': '/'},
            'mcposerver': {'port': 8000, 'health_path': '/'},
            'searxng': {'port': 8080, 'health_path': '/'}
        }
        self.results = {}
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Docker –∫–ª–∏–µ–Ω—Ç–∞
        try:
            self.docker_client = docker.from_env()
            logger.info("‚úÖ Docker client –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Docker: {e}")
    
    async def run_integration_tests(self) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        logger.info("üîó –ù–∞—á–∞–ª–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤")
        
        test_results = {
            'docker_integration': await self._test_docker_integration(),
            'service_health_chain': await self._test_service_health_chain(),
            'nginx_routing': await self._test_nginx_routing(),
            'service_communication': await self._test_service_communication(),
            'dependency_validation': await self._test_dependency_validation(),
            'network_connectivity': await self._test_network_connectivity(),
            'compose_validation': await self._test_compose_validation(),
            'timestamp': datetime.now().isoformat()
        }
        
        self.results = test_results
        return test_results
    
    async def _test_docker_integration(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Docker –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
        if not self.docker_client:
            return {'success': False, 'error': 'Docker client –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}
        
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ Open WebUI Hub
            all_containers = self.docker_client.containers.list(all=True)
            hub_containers = [c for c in all_containers if 'open-webui-hub' in c.name]
            
            container_details = {}
            running_count = 0
            healthy_count = 0
            
            for container in hub_containers:
                try:
                    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
                    stats = container.stats(stream=False)
                    
                    # –†–∞—Å—á–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è CPU
                    cpu_delta = stats['cpu_stats']['cpu_usage']['total_usage'] - \
                               stats['precpu_stats']['cpu_usage']['total_usage']
                    system_delta = stats['cpu_stats']['system_cpu_usage'] - \
                                  stats['precpu_stats']['system_cpu_usage']
                    cpu_percent = (cpu_delta / system_delta) * 100.0 if system_delta > 0 else 0
                    
                    # –†–∞—Å—á–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏
                    memory_usage = stats['memory_stats']['usage']
                    memory_limit = stats['memory_stats']['limit']
                    memory_percent = (memory_usage / memory_limit) * 100.0 if memory_limit > 0 else 0
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ health check
                    health_status = 'unknown'
                    if hasattr(container, 'attrs') and 'State' in container.attrs:
                        health = container.attrs['State'].get('Health', {})
                        health_status = health.get('Status', 'unknown')
                    
                    container_info = {
                        'name': container.name,
                        'status': container.status,
                        'health_status': health_status,
                        'cpu_percent': round(cpu_percent, 2),
                        'memory_usage_mb': round(memory_usage / 1024 / 1024, 2),
                        'memory_percent': round(memory_percent, 2),
                        'created': container.attrs['Created'],
                        'image': container.image.tags[0] if container.image.tags else 'unknown',
                        'ports': container.attrs['NetworkSettings']['Ports']
                    }
                    
                    container_details[container.name] = container_info
                    
                    if container.status == 'running':
                        running_count += 1
                    
                    if health_status == 'healthy':
                        healthy_count += 1
                        
                except Exception as e:
                    container_details[container.name] = {
                        'name': container.name,
                        'status': container.status,
                        'error': str(e)
                    }
            
            return {
                'success': True,
                'total_containers': len(hub_containers),
                'running_containers': running_count,
                'healthy_containers': healthy_count,
                'container_health_rate': (healthy_count / len(hub_containers) * 100) if hub_containers else 0,
                'container_details': container_details
            }
            
        except Exception as e:
            return {
                'success': False,
                'error': str(e)
            }
    
    async def _test_service_health_chain(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–ø–æ—á–∫–∏ health check —Å–µ—Ä–≤–∏—Å–æ–≤"""
        health_results = {}
        
        async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=10)) as session:
            for service_name, config in self.services_config.items():
                if config['health_path']:
                    health_url = f"http://localhost:{config['port']}{config['health_path']}"
                    
                    try:
                        start_time = time.time()
                        async with session.get(health_url) as response:
                            response_time = (time.time() - start_time) * 1000
                            
                            health_results[service_name] = {
                                'healthy': response.status == 200,
                                'status_code': response.status,
                                'response_time_ms': response_time,
                                'url': health_url
                            }
                    except Exception as e:
                        health_results[service_name] = {
                            'healthy': False,
                            'error': str(e),
                            'url': health_url
                        }
                else:
                    # –î–ª—è —Å–µ—Ä–≤–∏—Å–æ–≤ –±–µ–∑ HTTP health check (Redis, PostgreSQL)
                    health_results[service_name] = await self._test_non_http_service(service_name, config)
        
        healthy_count = sum(1 for result in health_results.values() if result.get('healthy', False))
        total_count = len(health_results)
        
        return {
            'total_services': total_count,
            'healthy_services': healthy_count,
            'health_percentage': (healthy_count / total_count * 100) if total_count > 0 else 0,
            'service_details': health_results
        }
    
    async def _test_non_http_service(self, service_name: str, config: Dict[str, Any]) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–≤ –±–µ–∑ HTTP –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        if service_name == 'redis':
            try:
                import redis
                client = redis.Redis(host='localhost', port=config['port'], decode_responses=True)
                client.ping()
                return {'healthy': True, 'method': 'redis_ping'}
            except Exception as e:
                return {'healthy': False, 'error': str(e), 'method': 'redis_ping'}
        
        elif service_name == 'db':
            try:
                try:
                    import psycopg2  # type: ignore
                except ImportError:
                    return {'healthy': False, 'error': 'psycopg2 not installed', 'method': 'postgres_connection'}

                conn = psycopg2.connect(
                    host='localhost',
                    port=config['port'],
                    database='openwebui',
                    user='postgres',
                    password='postgres'
                )
                conn.close()
                return {'healthy': True, 'method': 'postgres_connection'}
            except Exception as e:
                return {'healthy': False, 'error': str(e), 'method': 'postgres_connection'}
        
        else:
            return {'healthy': False, 'error': 'No health check method available'}
    
    async def _test_nginx_routing(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ Nginx"""
        nginx_routes = {
            'root': 'http://localhost:80/',
            'hub_route': 'http://localhost:80/hub',
            'api_hub_route': 'http://localhost:80/api/hub/health',
            'openwebui_route': 'http://localhost:80/docs',
            'redis_route': 'http://localhost:80/redis',
            'searxng_route': 'http://localhost:80/searxng'
        }
        
        routing_results = {}
        
        async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=10)) as session:
            for route_name, url in nginx_routes.items():
                try:
                    start_time = time.time()
                    async with session.get(url, allow_redirects=False) as response:
                        response_time = (time.time() - start_time) * 1000
                        
                        routing_results[route_name] = {
                            'success': response.status in [200, 301, 302, 401, 403],  # –î–æ–ø—É—Å—Ç–∏–º—ã–µ —Å—Ç–∞—Ç—É—Å—ã
                            'status_code': response.status,
                            'response_time_ms': response_time,
                            'url': url,
                            'server': response.headers.get('server', 'unknown'),
                            'location': response.headers.get('location', None)
                        }
                except Exception as e:
                    routing_results[route_name] = {
                        'success': False,
                        'error': str(e),
                        'url': url
                    }
        
        successful_routes = sum(1 for result in routing_results.values() if result.get('success', False))
        total_routes = len(routing_results)
        
        return {
            'total_routes': total_routes,
            'successful_routes': successful_routes,
            'routing_success_rate': (successful_routes / total_routes * 100) if total_routes > 0 else 0,
            'route_details': routing_results
        }
    
    async def _test_service_communication(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –º–µ–∂–¥—É —Å–µ—Ä–≤–∏—Å–∞–º–∏"""
        communication_tests = {
            'hub_to_redis': await self._test_hub_redis_communication(),
            'hub_to_docker': await self._test_hub_docker_communication(),
            'litellm_to_ollama': await self._test_litellm_ollama_communication(),
            'openwebui_to_litellm': await self._test_openwebui_litellm_communication()
        }
        
        successful_communications = sum(1 for result in communication_tests.values() 
                                      if result.get('success', False))
        total_communications = len(communication_tests)
        
        return {
            'total_tests': total_communications,
            'successful_tests': successful_communications,
            'communication_success_rate': (successful_communications / total_communications * 100) if total_communications > 0 else 0,
            'test_details': communication_tests
        }
    
    async def _test_hub_redis_communication(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è Hub —Å Redis"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ Hub –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—ç—à–µ
            async with aiohttp.ClientSession() as session:
                async with session.get('http://localhost:5003/api/cache/info') as response:
                    if response.status == 200:
                        cache_info = await response.json()
                        return {
                            'success': True,
                            'cache_size': cache_info.get('cache_size', 0),
                            'cache_keys': len(cache_info.get('cache_keys', [])),
                            'response_time_ms': 0  # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∏–∑–º–µ—Ä–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
                        }
                    else:
                        return {
                            'success': False,
                            'error': f'HTTP {response.status}'
                        }
        except Exception as e:
            return {
                'success': False,
                'error': str(e)
            }
    
    async def _test_hub_docker_communication(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è Hub —Å Docker"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ Hub –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–∏—Å–∞—Ö —á–µ—Ä–µ–∑ Docker
            async with aiohttp.ClientSession() as session:
                async with session.get('http://localhost:5003/api/services') as response:
                    if response.status == 200:
                        services_info = await response.json()
                        services = services_info.get('services', [])
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞—Ö
                        containers_with_status = sum(1 for service in services 
                                                   if service.get('container_status') != 'unknown')
                        
                        return {
                            'success': True,
                            'total_services': len(services),
                            'services_with_container_info': containers_with_status,
                            'docker_integration_rate': (containers_with_status / len(services) * 100) if services else 0
                        }
                    else:
                        return {
                            'success': False,
                            'error': f'HTTP {response.status}'
                        }
        except Exception as e:
            return {
                'success': False,
                'error': str(e)
            }
    
    async def _test_litellm_ollama_communication(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è LiteLLM —Å Ollama"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–µ–π —á–µ—Ä–µ–∑ LiteLLM
            async with aiohttp.ClientSession() as session:
                headers = {'Authorization': 'Bearer sk-1234567890abcdef'}
                async with session.get('http://localhost:4000/v1/models', headers=headers) as response:
                    if response.status == 200:
                        models_data = await response.json()
                        models = models_data.get('data', [])
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Ollama –º–æ–¥–µ–ª–µ–π
                        ollama_models = [model for model in models 
                                       if 'ollama' in model.get('owned_by', '').lower()]
                        
                        return {
                            'success': True,
                            'total_models': len(models),
                            'ollama_models': len(ollama_models),
                            'ollama_integration': len(ollama_models) > 0
                        }
                    else:
                        return {
                            'success': False,
                            'error': f'HTTP {response.status}'
                        }
        except Exception as e:
            return {
                'success': False,
                'error': str(e)
            }
    
    async def _test_openwebui_litellm_communication(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è Open WebUI —Å LiteLLM"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ Open WebUI –¥–æ—Å—Ç—É–ø–µ–Ω –∏ –º–æ–∂–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å LLM
            async with aiohttp.ClientSession() as session:
                async with session.get('http://localhost:3000/') as response:
                    if response.status == 200:
                        content = await response.text()
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤, —É–∫–∞–∑—ã–≤–∞—é—â–∏—Ö –Ω–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å LLM
                        has_model_references = 'model' in content.lower()
                        has_chat_interface = 'chat' in content.lower()
                        has_api_references = 'api' in content.lower()
                        
                        return {
                            'success': True,
                            'has_model_references': has_model_references,
                            'has_chat_interface': has_chat_interface,
                            'has_api_references': has_api_references,
                            'integration_indicators': sum([has_model_references, has_chat_interface, has_api_references])
                        }
                    else:
                        return {
                            'success': False,
                            'error': f'HTTP {response.status}'
                        }
        except Exception as e:
            return {
                'success': False,
                'error': str(e)
            }
    
    async def _test_dependency_validation(self) -> Dict[str, Any]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –º–µ–∂–¥—É —Å–µ—Ä–≤–∏—Å–∞–º–∏"""
        dependencies = {
            'openwebui': ['auth', 'hub', 'docling', 'db', 'edgetts', 'litellm', 'mcposerver', 'nginx', 'ollama', 'searxng', 'tika'],
            'litellm': ['ollama', 'redis'],
            'hub': ['db', 'redis'],
            'auth': [],
            'nginx': []  # Nginx –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≤—Å–µ—Ö, –Ω–æ –º—ã –ø—Ä–æ–≤–µ—Ä–∏–º –æ—Å–Ω–æ–≤–Ω—ã–µ
        }
        
        dependency_results = {}
        
        for service, deps in dependencies.items():
            service_deps_status = {}
            
            for dep in deps:
                if dep in self.services_config:
                    dep_config = self.services_config[dep]
                    
                    if dep_config['health_path']:
                        health_url = f"http://localhost:{dep_config['port']}{dep_config['health_path']}"
                        
                        try:
                            async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=5)) as session:
                                async with session.get(health_url) as response:
                                    service_deps_status[dep] = {
                                        'available': response.status == 200,
                                        'status_code': response.status
                                    }
                        except Exception:
                            service_deps_status[dep] = {
                                'available': False,
                                'error': 'Connection failed'
                            }
                    else:
                        # –î–ª—è —Å–µ—Ä–≤–∏—Å–æ–≤ –±–µ–∑ HTTP health check
                        service_deps_status[dep] = {'available': True, 'note': 'No HTTP health check'}
            
            available_deps = sum(1 for status in service_deps_status.values() 
                               if status.get('available', False))
            total_deps = len(service_deps_status)
            
            dependency_results[service] = {
                'total_dependencies': total_deps,
                'available_dependencies': available_deps,
                'dependency_satisfaction_rate': (available_deps / total_deps * 100) if total_deps > 0 else 100,
                'dependency_details': service_deps_status
            }
        
        return dependency_results

    async def _test_network_connectivity(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ç–µ–≤–æ–π —Å–≤—è–∑–Ω–æ—Å—Ç–∏ –º–µ–∂–¥—É —Å–µ—Ä–≤–∏—Å–∞–º–∏"""
        network_tests = {}

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–µ—Ç–µ–≤—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        test_connections = [
            ('hub_to_redis', 'localhost', 6379),
            ('hub_to_db', 'localhost', 5432),
            ('litellm_to_ollama', 'localhost', 11435),
            ('nginx_to_hub', 'localhost', 5003),
            ('nginx_to_openwebui', 'localhost', 3000)
        ]

        for test_name, host, port in test_connections:
            try:
                # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ TCP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
                import socket
                sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                sock.settimeout(5)
                result = sock.connect_ex((host, port))
                sock.close()

                network_tests[test_name] = {
                    'success': result == 0,
                    'host': host,
                    'port': port,
                    'connection_result': result
                }
            except Exception as e:
                network_tests[test_name] = {
                    'success': False,
                    'host': host,
                    'port': port,
                    'error': str(e)
                }

        successful_connections = sum(1 for test in network_tests.values()
                                   if test.get('success', False))
        total_connections = len(network_tests)

        return {
            'total_connections_tested': total_connections,
            'successful_connections': successful_connections,
            'network_connectivity_rate': (successful_connections / total_connections * 100) if total_connections > 0 else 0,
            'connection_details': network_tests
        }

    async def _test_compose_validation(self) -> Dict[str, Any]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è Docker Compose –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é compose.local.yml
            result = subprocess.run(
                ['docker-compose', '-f', 'compose.local.yml', 'config'],
                capture_output=True,
                text=True,
                cwd='/Users/kostas/Documents/Projects/open-webui-hub'
            )

            if result.returncode == 0:
                # –ü–∞—Ä—Å–∏–º –≤—ã–≤–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–≤–∏—Å–∞—Ö
                config_output = result.stdout

                # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Ä–≤–∏—Å–æ–≤ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                service_count = config_output.count('services:') + config_output.count('  ') // 2

                return {
                    'success': True,
                    'config_valid': True,
                    'estimated_services': service_count,
                    'config_size': len(config_output)
                }
            else:
                return {
                    'success': False,
                    'config_valid': False,
                    'error': result.stderr
                }
        except Exception as e:
            return {
                'success': False,
                'error': str(e)
            }

    def save_results(self, filename: Optional[str] = None):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        if filename is None:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"tests/integration_testing_results_{timestamp}.json"

        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(self.results, f, indent=2, ensure_ascii=False, default=str)

        logger.info(f"üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {filename}")
        return filename

    def generate_summary_report(self) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫—Ä–∞—Ç–∫–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        if not self.results:
            return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞"

        summary = []
        summary.append("# üîó –û—Ç—á–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Open WebUI Hub")
        summary.append(f"**–î–∞—Ç–∞:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        summary.append("")

        # Docker –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
        docker_results = self.results.get('docker_integration', {})
        if docker_results.get('success', False):
            total_containers = docker_results.get('total_containers', 0)
            running_containers = docker_results.get('running_containers', 0)
            healthy_containers = docker_results.get('healthy_containers', 0)

            summary.append("## üê≥ Docker –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è")
            summary.append(f"- –í—Å–µ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤: {total_containers}")
            summary.append(f"- –ó–∞–ø—É—â–µ–Ω–Ω—ã—Ö: {running_containers}")
            summary.append(f"- –ó–¥–æ—Ä–æ–≤—ã—Ö: {healthy_containers}")
            summary.append(f"- –ü—Ä–æ—Ü–µ–Ω—Ç –∑–¥–æ—Ä–æ–≤—ã—Ö: {docker_results.get('container_health_rate', 0):.1f}%")
            summary.append("")

        # Health check —Ü–µ–ø–æ—á–∫–∞
        health_results = self.results.get('service_health_chain', {})
        if health_results:
            summary.append("## üè• Health check —Å–µ—Ä–≤–∏—Å–æ–≤")
            summary.append(f"- –í—Å–µ–≥–æ —Å–µ—Ä–≤–∏—Å–æ–≤: {health_results.get('total_services', 0)}")
            summary.append(f"- –ó–¥–æ—Ä–æ–≤—ã—Ö: {health_results.get('healthy_services', 0)}")
            summary.append(f"- –ü—Ä–æ—Ü–µ–Ω—Ç –∑–¥–æ—Ä–æ–≤—ã—Ö: {health_results.get('health_percentage', 0):.1f}%")
            summary.append("")

        # Nginx –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è
        nginx_results = self.results.get('nginx_routing', {})
        if nginx_results:
            summary.append("## üåê Nginx –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è")
            summary.append(f"- –í—Å–µ–≥–æ –º–∞—Ä—à—Ä—É—Ç–æ–≤: {nginx_results.get('total_routes', 0)}")
            summary.append(f"- –£—Å–ø–µ—à–Ω—ã—Ö: {nginx_results.get('successful_routes', 0)}")
            summary.append(f"- –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {nginx_results.get('routing_success_rate', 0):.1f}%")
            summary.append("")

        # –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å–µ—Ä–≤–∏—Å–æ–≤
        comm_results = self.results.get('service_communication', {})
        if comm_results:
            summary.append("## üîÑ –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å–µ—Ä–≤–∏—Å–æ–≤")
            summary.append(f"- –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {comm_results.get('total_tests', 0)}")
            summary.append(f"- –£—Å–ø–µ—à–Ω—ã—Ö: {comm_results.get('successful_tests', 0)}")
            summary.append(f"- –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {comm_results.get('communication_success_rate', 0):.1f}%")
            summary.append("")

        # –°–µ—Ç–µ–≤–∞—è —Å–≤—è–∑–Ω–æ—Å—Ç—å
        network_results = self.results.get('network_connectivity', {})
        if network_results:
            summary.append("## üåê –°–µ—Ç–µ–≤–∞—è —Å–≤—è–∑–Ω–æ—Å—Ç—å")
            summary.append(f"- –í—Å–µ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: {network_results.get('total_connections_tested', 0)}")
            summary.append(f"- –£—Å–ø–µ—à–Ω—ã—Ö: {network_results.get('successful_connections', 0)}")
            summary.append(f"- –°–≤—è–∑–Ω–æ—Å—Ç—å: {network_results.get('network_connectivity_rate', 0):.1f}%")
            summary.append("")

        # –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞
        summary.append("## üìä –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏")

        # –ü–æ–¥—Å—á–µ—Ç –æ–±—â–µ–≥–æ –±–∞–ª–ª–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
        scores = []
        if docker_results.get('success', False):
            scores.append(docker_results.get('container_health_rate', 0))
        if health_results:
            scores.append(health_results.get('health_percentage', 0))
        if nginx_results:
            scores.append(nginx_results.get('routing_success_rate', 0))
        if comm_results:
            scores.append(comm_results.get('communication_success_rate', 0))
        if network_results:
            scores.append(network_results.get('network_connectivity_rate', 0))

        overall_score = sum(scores) / len(scores) if scores else 0

        if overall_score >= 90:
            status = "üü¢ –û—Ç–ª–∏—á–Ω–∞—è"
        elif overall_score >= 75:
            status = "üü° –•–æ—Ä–æ—à–∞—è"
        elif overall_score >= 50:
            status = "üü† –£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–∞—è"
        else:
            status = "üî¥ –¢—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è"

        summary.append(f"- **–û–±—â–∏–π –±–∞–ª–ª –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏:** {overall_score:.1f}/100")
        summary.append(f"- **–°—Ç–∞—Ç—É—Å:** {status}")
        summary.append("")
        summary.append("---")
        summary.append("*–û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∏—Å—Ç–µ–º–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è*")

        return "\n".join(summary)

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîó –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤ Open WebUI Hub")
    print("=" * 60)

    tester = IntegrationTester()

    try:
        results = await tester.run_integration_tests()
        results_file = tester.save_results()

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫—Ä–∞—Ç–∫–æ–≥–æ –æ—Ç—á–µ—Ç–∞
        summary_report = tester.generate_summary_report()
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        summary_file = f"tests/integration_summary_{timestamp}.md"

        with open(summary_file, 'w', encoding='utf-8') as f:
            f.write(summary_report)

        # –í—ã–≤–æ–¥ –∫—Ä–∞—Ç–∫–æ–≥–æ –æ—Ç—á–µ—Ç–∞
        print("\n" + "="*60)
        print("üìä –ö–†–ê–¢–ö–ò–ô –û–¢–ß–ï–¢ –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        print("="*60)

        # Docker –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
        docker_results = results.get('docker_integration', {})
        if docker_results.get('success', False):
            print(f"üê≥ Docker: {docker_results.get('running_containers', 0)}/{docker_results.get('total_containers', 0)} –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –∑–∞–ø—É—â–µ–Ω–æ")

        # Health check
        health_results = results.get('service_health_chain', {})
        if health_results:
            print(f"üè• Health: {health_results.get('healthy_services', 0)}/{health_results.get('total_services', 0)} —Å–µ—Ä–≤–∏—Å–æ–≤ –∑–¥–æ—Ä–æ–≤—ã")

        # Nginx
        nginx_results = results.get('nginx_routing', {})
        if nginx_results:
            print(f"üåê Nginx: {nginx_results.get('successful_routes', 0)}/{nginx_results.get('total_routes', 0)} –º–∞—Ä—à—Ä—É—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞—é—Ç")

        # –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ
        comm_results = results.get('service_communication', {})
        if comm_results:
            print(f"üîÑ –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ: {comm_results.get('successful_tests', 0)}/{comm_results.get('total_tests', 0)} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏")

        print("="*60)
        print(f"üìÑ –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã: {results_file}")
        print(f"üìã –ö—Ä–∞—Ç–∫–∏–π –æ—Ç—á–µ—Ç: {summary_file}")

        return 0

    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return 1

if __name__ == "__main__":
    exit_code = asyncio.run(main())
    sys.exit(exit_code)
