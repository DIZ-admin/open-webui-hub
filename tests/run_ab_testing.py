#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Open WebUI Hub
–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç—ã
"""

import asyncio
import sys
import os
import argparse
from datetime import datetime
import subprocess

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from ab_testing_framework import ABTestingFramework, TestConfig
from report_generator import ABTestingReportGenerator

def check_dependencies():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    required_packages = [
        'aiohttp', 'docker', 'redis', 'psutil', 
        'matplotlib', 'seaborn', 'pandas', 'jinja2'
    ]
    
    missing_packages = []
    
    for package in required_packages:
        try:
            __import__(package)
        except ImportError:
            missing_packages.append(package)
    
    if missing_packages:
        print("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞–∫–µ—Ç—ã:")
        for package in missing_packages:
            print(f"   - {package}")
        print("\n–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏—Ö –∫–æ–º–∞–Ω–¥–æ–π:")
        print(f"pip install {' '.join(missing_packages)}")
        return False
    
    return True

def check_services_availability():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤ –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    import requests
    
    services_to_check = [
        ("Hub API", "http://localhost:5003/api/health"),
        ("Dashboard API", "http://localhost:5002/api/health"),
        ("LiteLLM", "http://localhost:4000/health"),
        ("Nginx", "http://localhost:80"),
    ]
    
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤...")
    
    available_services = 0
    for service_name, url in services_to_check:
        try:
            response = requests.get(url, timeout=5)
            if response.status_code in [200, 301, 302]:
                print(f"   ‚úÖ {service_name}: –¥–æ—Å—Ç—É–ø–µ–Ω")
                available_services += 1
            else:
                print(f"   ‚ö†Ô∏è {service_name}: HTTP {response.status_code}")
        except Exception as e:
            print(f"   ‚ùå {service_name}: –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω ({e})")
    
    print(f"\nüìä –î–æ—Å—Ç—É–ø–Ω–æ —Å–µ—Ä–≤–∏—Å–æ–≤: {available_services}/{len(services_to_check)}")
    
    if available_services < len(services_to_check) // 2:
        print("‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏—Å—Ç–µ–º—É:")
        print("   docker-compose -f compose.local.yml up -d")
        return False
    
    return True

def setup_test_environment():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥—ã"""
    # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –¥–ª—è —Ç–µ—Å—Ç–æ–≤
    test_dirs = ['tests', 'tests/reports', 'tests/logs']
    
    for test_dir in test_dirs:
        os.makedirs(test_dir, exist_ok=True)
    
    print("‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è —Å—Ä–µ–¥–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")

async def run_comprehensive_testing(config: TestConfig, verbose: bool = False):
    """–ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Open WebUI Hub")
    print("=" * 60)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    framework = ABTestingFramework(config)
    
    try:
        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        results = await framework.run_comprehensive_tests()
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        results_file = f"tests/ab_testing_results_{timestamp}.json"
        framework.save_results_to_file(results_file)
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤
        print("\nüìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤...")
        report_generator = ABTestingReportGenerator(results_file)
        report_file = report_generator.generate_comprehensive_report()
        
        # –í—ã–≤–æ–¥ –∫—Ä–∞—Ç–∫–æ–≥–æ —Ä–µ–∑—é–º–µ
        print_test_summary(results)
        
        print(f"\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        print(f"üìÑ –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç: {report_file}")
        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {results_file}")
        
        return True, results_file, report_file
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        if verbose:
            import traceback
            traceback.print_exc()
        return False, None, None

def print_test_summary(results: dict):
    """–í—ã–≤–æ–¥ –∫—Ä–∞—Ç–∫–æ–≥–æ —Ä–µ–∑—é–º–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("\n" + "="*60)
    print("üìä –ö–†–ê–¢–ö–û–ï –†–ï–ó–Æ–ú–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("="*60)
    
    # –ó–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã
    health_data = results.get('health_check', {})
    if health_data:
        healthy_count = sum(1 for service in health_data.values() 
                          if isinstance(service, dict) and service.get('is_healthy', False))
        total_count = len(health_data)
        health_percentage = (healthy_count / total_count * 100) if total_count > 0 else 0
        
        print(f"üè• –ó–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã: {healthy_count}/{total_count} —Å–µ—Ä–≤–∏—Å–æ–≤ ({health_percentage:.1f}%)")
    
    # –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    performance_data = results.get('performance_metrics', [])
    if performance_data:
        avg_response_times = []
        success_rates = []
        
        for metrics in performance_data:
            if isinstance(metrics, dict):
                avg_response_times.append(metrics.get('avg_response_time', 0))
                success_rates.append(metrics.get('success_rate', 0))
        
        if avg_response_times:
            avg_response = sum(avg_response_times) / len(avg_response_times)
            avg_success = sum(success_rates) / len(success_rates) * 100
            
            print(f"‚ö° –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {avg_response:.1f}ms —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞, {avg_success:.1f}% —É—Å–ø–µ—à–Ω–æ—Å—Ç—å")
    
    # –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
    cache_data = results.get('cache_metrics', {})
    if cache_data:
        if hasattr(cache_data, 'hit_rate'):
            hit_rate = cache_data.hit_rate * 100
        else:
            hit_rate = cache_data.get('hit_rate', 0) * 100
        print(f"üîÑ –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ: {hit_rate:.1f}% hit rate")
    
    # LLM –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    llm_data = results.get('llm_performance', {})
    if llm_data and isinstance(llm_data, dict):
        health_check = llm_data.get('health_check', {})
        model_listing = llm_data.get('model_listing', {})

        llm_healthy = health_check.get('success', False) if isinstance(health_check, dict) else False
        models_count = model_listing.get('total_models', 0) if isinstance(model_listing, dict) else 0

        print(f"ü§ñ LLM –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è: {'‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç' if llm_healthy else '‚ùå –ü—Ä–æ–±–ª–µ–º—ã'}, {models_count} –º–æ–¥–µ–ª–µ–π –¥–æ—Å—Ç—É–ø–Ω–æ")
    
    print(f"‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {results.get('test_duration', 0):.1f} —Å–µ–∫—É–Ω–¥")
    print("="*60)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(description='A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Open WebUI Hub')
    parser.add_argument('--skip-checks', action='store_true', 
                       help='–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤')
    parser.add_argument('--verbose', '-v', action='store_true',
                       help='–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥ –æ—à–∏–±–æ–∫')
    parser.add_argument('--duration', type=int, default=60,
                       help='–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 60)')
    parser.add_argument('--concurrent', type=int, default=10,
                       help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 10)')
    parser.add_argument('--target-response-time', type=int, default=50,
                       help='–¶–µ–ª–µ–≤–æ–µ –≤—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 50)')
    parser.add_argument('--target-cache-hit-rate', type=float, default=0.90,
                       help='–¶–µ–ª–µ–≤–æ–π hit rate –∫—ç—à–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 0.90)')
    
    args = parser.parse_args()
    
    print("üîß –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é Open WebUI Hub")
    print(f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print(f"  - –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {args.duration} —Å–µ–∫—É–Ω–¥")
    print(f"  - –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã: {args.concurrent}")
    print(f"  - –¶–µ–ª–µ–≤–æ–µ –≤—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞: {args.target_response_time}ms")
    print(f"  - –¶–µ–ª–µ–≤–æ–π cache hit rate: {args.target_cache_hit_rate*100}%")
    print()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    if not check_dependencies():
        return 1
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥—ã
    setup_test_environment()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤
    if not args.skip_checks:
        if not check_services_availability():
            print("\n‚ùå –ù–µ –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã –¥–æ—Å—Ç—É–ø–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --skip-checks –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞.")
            return 1
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    config = TestConfig(
        test_duration_seconds=args.duration,
        concurrent_requests=args.concurrent,
        target_response_time_ms=args.target_response_time,
        target_cache_hit_rate=args.target_cache_hit_rate
    )
    
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    try:
        success, results_file, report_file = asyncio.run(
            run_comprehensive_testing(config, args.verbose)
        )
        
        if success:
            print(f"\nüéâ A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
            
            # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç—å –æ—Ç—á–µ—Ç
            if report_file and os.path.exists(report_file):
                try:
                    # –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–∫—Ä—ã—Ç—å –æ—Ç—á–µ—Ç –≤ –±—Ä–∞—É–∑–µ—Ä–µ
                    if sys.platform.startswith('darwin'):  # macOS
                        subprocess.run(['open', report_file])
                    elif sys.platform.startswith('linux'):  # Linux
                        subprocess.run(['xdg-open', report_file])
                    elif sys.platform.startswith('win'):  # Windows
                        subprocess.run(['start', report_file], shell=True)
                    
                    print(f"üìñ –û—Ç—á–µ—Ç –æ—Ç–∫—Ä—ã—Ç –≤ –±—Ä–∞—É–∑–µ—Ä–µ: {report_file}")
                except Exception:
                    print(f"üìñ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}")
            
            return 0
        else:
            print(f"\n‚ùå A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å –æ—à–∏–±–∫–∞–º–∏")
            return 1
            
    except KeyboardInterrupt:
        print(f"\n‚èπÔ∏è  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return 1
    except Exception as e:
        print(f"\n‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        if args.verbose:
            import traceback
            traceback.print_exc()
        return 1

if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code)
