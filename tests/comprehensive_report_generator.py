#!/usr/bin/env python3
"""
–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Open WebUI Hub
–û–±—ä–µ–¥–∏–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—Å–µ—Ö –≤–∏–¥–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –µ–¥–∏–Ω—ã–π –æ—Ç—á–µ—Ç
"""

import json
import os
import glob
from datetime import datetime
from typing import Dict, List, Any, Optional
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class ComprehensiveReportGenerator:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
    
    def __init__(self):
        self.test_results = {}
        self.report_timestamp = datetime.now()
    
    def load_all_test_results(self) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        results = {}
        
        # –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        test_files = {
            'ab_testing': glob.glob('tests/ab_testing_results_*.json'),
            'functional_web': glob.glob('tests/functional_web_testing_results_*.json'),
            'integration': glob.glob('tests/integration_testing_results_*.json'),
            'litellm': glob.glob('tests/litellm_testing_results_*.json')
        }
        
        for test_type, files in test_files.items():
            if files:
                # –ë–µ—Ä–µ–º —Å–∞–º—ã–π —Å–≤–µ–∂–∏–π —Ñ–∞–π–ª
                latest_file = max(files, key=os.path.getctime)
                try:
                    with open(latest_file, 'r', encoding='utf-8') as f:
                        results[test_type] = json.load(f)
                    logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã {test_type} –∏–∑ {latest_file}")
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {latest_file}: {e}")
                    results[test_type] = {}
            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è {test_type}")
                results[test_type] = {}
        
        self.test_results = results
        return results
    
    def generate_comprehensive_report(self) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        if not self.test_results:
            self.load_all_test_results()

        try:
            report = []
            report.append("# üöÄ –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –æ—Ç—á–µ—Ç A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Open WebUI Hub")
            report.append("")
            report.append(f"**–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞:** {self.report_timestamp.strftime('%Y-%m-%d %H:%M:%S')}")
            report.append("")
            report.append("## üìã –û–±–∑–æ—Ä —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            report.append("")
            report.append("–î–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã Open WebUI Hub, –≤–∫–ª—é—á–∞—é—â–µ–≥–æ:")
            report.append("- –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤")
            report.append("- –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤")
            report.append("- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
            report.append("- –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ LiteLLM")
            report.append("")

            # –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Ä–µ–∑—é–º–µ
            logger.info("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ä–µ–∑—é–º–µ...")
            report.extend(self._generate_executive_summary())

            # –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –∫–∞–∂–¥–æ–º—É —Ç–∏–ø—É —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            logger.info("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ–∫—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")
            report.extend(self._generate_performance_section())

            logger.info("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ–∫—Ü–∏–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...")
            report.extend(self._generate_functional_section())

            logger.info("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ–∫—Ü–∏–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...")
            report.extend(self._generate_integration_section())

            logger.info("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ–∫—Ü–∏–∏ LiteLLM...")
            report.extend(self._generate_litellm_section())

            # –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            logger.info("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π...")
            report.extend(self._generate_recommendations())

            # –ó–∞–∫–ª—é—á–µ–Ω–∏–µ
            logger.info("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–∫–ª—é—á–µ–Ω–∏—è...")
            report.extend(self._generate_conclusion())

            return "\n".join(report)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")
            import traceback
            traceback.print_exc()
            raise
    
    def _generate_executive_summary(self) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ä–µ–∑—é–º–µ"""
        summary = []
        summary.append("## üìä –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Ä–µ–∑—é–º–µ")
        summary.append("")
        
        # –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
        overall_status = self._calculate_overall_status()
        summary.append(f"**–û–±—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:** {overall_status['status']}")
        summary.append(f"**–û–±—â–∏–π –±–∞–ª–ª:** {overall_status['score']:.1f}/100")
        summary.append("")
        
        # –ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        summary.append("### üéØ –ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏")
        summary.append("")
        
        # A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        ab_results = self.test_results.get('ab_testing', {})
        if ab_results:
            performance_metrics = ab_results.get('performance_metrics', [])
            if performance_metrics:
                avg_response_times = [m.get('avg_response_time', 0) for m in performance_metrics if isinstance(m, dict)]
                if avg_response_times:
                    avg_response = sum(avg_response_times) / len(avg_response_times)
                    summary.append(f"- **–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞:** {avg_response:.1f}ms (—Ü–µ–ª—å: <50ms)")
            
            cache_metrics = ab_results.get('cache_metrics', {})
            if hasattr(cache_metrics, 'hit_rate'):
                hit_rate = cache_metrics.hit_rate * 100
            elif isinstance(cache_metrics, dict):
                hit_rate = cache_metrics.get('hit_rate', 0) * 100
            else:
                hit_rate = 0
            summary.append(f"- **Cache Hit Rate:** {hit_rate:.1f}% (—Ü–µ–ª—å: >90%)")
        
        # –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        functional_results = self.test_results.get('functional_web', {})
        if functional_results and isinstance(functional_results, dict):
            accessible_count = 0
            total_count = 0
            for service_name, service_data in functional_results.items():
                if isinstance(service_data, dict) and 'accessibility' in service_data:
                    total_count += 1
                    if service_data['accessibility'].get('accessible', False):
                        accessible_count += 1

            if total_count > 0:
                accessibility_rate = (accessible_count / total_count) * 100
                summary.append(f"- **–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤:** {accessible_count}/{total_count} ({accessibility_rate:.1f}%)")
        
        # –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        integration_results = self.test_results.get('integration', {})
        if integration_results:
            docker_results = integration_results.get('docker_integration', {})
            if docker_results.get('success', False):
                running = docker_results.get('running_containers', 0)
                total = docker_results.get('total_containers', 0)
                summary.append(f"- **Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã:** {running}/{total} –∑–∞–ø—É—â–µ–Ω–æ")
        
        # LiteLLM —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        litellm_results = self.test_results.get('litellm', {})
        if litellm_results:
            models_results = litellm_results.get('models_availability', {})
            if models_results.get('success', False):
                total_models = models_results.get('total_models', 0)
                summary.append(f"- **LLM –º–æ–¥–µ–ª–∏:** {total_models} –¥–æ—Å—Ç—É–ø–Ω–æ")
        
        summary.append("")
        
        # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
        critical_issues = self._identify_critical_issues()
        if critical_issues:
            summary.append("### ‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã")
            summary.append("")
            for issue in critical_issues[:5]:  # –¢–æ–ø-5 –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º
                summary.append(f"- {issue}")
            summary.append("")
        
        return summary
    
    def _calculate_overall_status(self) -> Dict[str, Any]:
        """–†–∞—Å—á–µ—Ç –æ–±—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã"""
        scores = []
        
        # A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        ab_results = self.test_results.get('ab_testing', {})
        if ab_results:
            # –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            performance_metrics = ab_results.get('performance_metrics', [])
            if performance_metrics:
                successful_tests = sum(1 for m in performance_metrics 
                                     if isinstance(m, dict) and m.get('success_rate', 0) > 0.9)
                total_tests = len(performance_metrics)
                if total_tests > 0:
                    scores.append((successful_tests / total_tests) * 100)
        
        # –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        functional_results = self.test_results.get('functional_web', {})
        if functional_results and isinstance(functional_results, dict):
            accessible_count = 0
            total_count = 0
            for service_data in functional_results.values():
                if isinstance(service_data, dict) and 'accessibility' in service_data:
                    total_count += 1
                    if service_data['accessibility'].get('accessible', False):
                        accessible_count += 1

            if total_count > 0:
                scores.append((accessible_count / total_count) * 100)
        
        # –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        integration_results = self.test_results.get('integration', {})
        if integration_results:
            health_results = integration_results.get('service_health_chain', {})
            if health_results:
                health_percentage = health_results.get('health_percentage', 0)
                scores.append(health_percentage)
        
        # LiteLLM —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        litellm_results = self.test_results.get('litellm', {})
        if litellm_results:
            health_check = litellm_results.get('health_check', {})
            models_check = litellm_results.get('models_availability', {})
            
            litellm_score = 0
            if health_check.get('success', False):
                litellm_score += 50
            if models_check.get('success', False):
                litellm_score += 50
            
            scores.append(litellm_score)
        
        # –†–∞—Å—á–µ—Ç –æ–±—â–µ–≥–æ –±–∞–ª–ª–∞
        overall_score = sum(scores) / len(scores) if scores else 0
        
        if overall_score >= 90:
            status = "üü¢ –û—Ç–ª–∏—á–Ω—ã–π"
        elif overall_score >= 75:
            status = "üü° –•–æ—Ä–æ—à–∏–π"
        elif overall_score >= 50:
            status = "üü† –£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã–π"
        else:
            status = "üî¥ –¢—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è"
        
        return {
            'score': overall_score,
            'status': status,
            'component_scores': scores
        }
    
    def _identify_critical_issues(self) -> List[str]:
        """–í—ã—è–≤–ª–µ–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º"""
        issues = []
        
        # –ü—Ä–æ–±–ª–µ–º—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        ab_results = self.test_results.get('ab_testing', {})
        if ab_results:
            performance_metrics = ab_results.get('performance_metrics', [])
            for metric in performance_metrics:
                if isinstance(metric, dict):
                    if metric.get('avg_response_time', 0) > 100:
                        service = metric.get('service_name', 'unknown')
                        time_ms = metric.get('avg_response_time', 0)
                        issues.append(f"–í—ã—Å–æ–∫–æ–µ –≤—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞ {service}: {time_ms:.1f}ms")
                    
                    if metric.get('success_rate', 1) < 0.95:
                        service = metric.get('service_name', 'unknown')
                        rate = metric.get('success_rate', 0) * 100
                        issues.append(f"–ù–∏–∑–∫–∞—è —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–æ–≤ {service}: {rate:.1f}%")
        
        # –ü—Ä–æ–±–ª–µ–º—ã –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
        functional_results = self.test_results.get('functional_web', {})
        if functional_results and isinstance(functional_results, dict):
            for service_name, service_data in functional_results.items():
                if isinstance(service_data, dict) and 'accessibility' in service_data:
                    if not service_data['accessibility'].get('accessible', False):
                        issues.append(f"–í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å {service_name} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        
        # –ü—Ä–æ–±–ª–µ–º—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
        integration_results = self.test_results.get('integration', {})
        if integration_results:
            health_results = integration_results.get('service_health_chain', {})
            if health_results:
                health_percentage = health_results.get('health_percentage', 0)
                if health_percentage < 80:
                    issues.append(f"–ù–∏–∑–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –∑–¥–æ—Ä–æ–≤—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤: {health_percentage:.1f}%")
        
        # –ü—Ä–æ–±–ª–µ–º—ã LiteLLM
        litellm_results = self.test_results.get('litellm', {})
        if litellm_results:
            health_check = litellm_results.get('health_check', {})
            if not health_check.get('success', False):
                issues.append("LiteLLM —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        
        return issues
    
    def _generate_performance_section(self) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ–∫—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        section = []
        section.append("## ‚ö° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
        section.append("")

        ab_results = self.test_results.get('ab_testing', {})
        if not ab_results:
            section.append("‚ùå –î–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
            section.append("")
            return section

        # –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        performance_metrics = ab_results.get('performance_metrics', [])
        if performance_metrics:
            section.append("### üìà –ú–µ—Ç—Ä–∏–∫–∏ –ø–æ —Å–µ—Ä–≤–∏—Å–∞–º")
            section.append("")
            section.append("| –°–µ—Ä–≤–∏—Å | –í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞ (ms) | –£—Å–ø–µ—à–Ω–æ—Å—Ç—å (%) | CPU (%) | –ü–∞–º—è—Ç—å (MB) |")
            section.append("|--------|-------------------|----------------|---------|-------------|")

            for metric in performance_metrics:
                if isinstance(metric, dict):
                    service = metric.get('service_name', 'unknown')
                    response_time = metric.get('avg_response_time', 0)
                    success_rate = metric.get('success_rate', 0) * 100
                    cpu_usage = metric.get('cpu_usage', 0) * 100
                    memory_usage = metric.get('memory_usage_mb', 0)

                    section.append(f"| {service} | {response_time:.1f} | {success_rate:.1f} | {cpu_usage:.1f} | {memory_usage:.1f} |")

            section.append("")

        # –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
        cache_metrics = ab_results.get('cache_metrics', {})
        if cache_metrics:
            section.append("### üóÑÔ∏è –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è")
            section.append("")

            if hasattr(cache_metrics, 'hit_rate'):
                hit_rate = cache_metrics.hit_rate * 100
                used_memory = getattr(cache_metrics, 'used_memory_mb', 0)
            elif isinstance(cache_metrics, dict):
                hit_rate = cache_metrics.get('hit_rate', 0) * 100
                used_memory = cache_metrics.get('used_memory_mb', 0)
            else:
                hit_rate = 0
                used_memory = 0

            section.append(f"- **Hit Rate:** {hit_rate:.1f}%")
            section.append(f"- **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏:** {used_memory:.1f}MB")
            section.append("")

        return section

    def _generate_functional_section(self) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ–∫—Ü–∏–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        section = []
        section.append("## üåê –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤")
        section.append("")

        functional_results = self.test_results.get('functional_web', {})
        if not functional_results:
            section.append("‚ùå –î–∞–Ω–Ω—ã–µ –æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
            section.append("")
            return section

        section.append("### üìä –°—Ç–∞—Ç—É—Å –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤")
        section.append("")
        section.append("| –°–µ—Ä–≤–∏—Å | –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å | –í—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏ (ms) | –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å |")
        section.append("|--------|-------------|-------------------|-----------------|")

        if isinstance(functional_results, dict):
            for service_name, service_data in functional_results.items():
                if isinstance(service_data, dict) and 'accessibility' in service_data:
                    accessible = service_data['accessibility'].get('accessible', False)
                    response_time = service_data['accessibility'].get('response_time_ms', -1)

                    # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
                    functionality = service_data.get('functionality', {})
                    interactive_elements = functionality.get('interactive_elements', {})
                    interactive_score = interactive_elements.get('interactive_score', 0)

                    status_icon = '‚úÖ' if accessible else '‚ùå'
                    time_str = f"{response_time:.1f}" if response_time > 0 else "N/A"
                    interactive_str = f"{interactive_score:.1%}" if interactive_score > 0 else "N/A"

                    section.append(f"| {service_name} | {status_icon} | {time_str} | {interactive_str} |")

        section.append("")
        return section

    def _generate_integration_section(self) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ–∫—Ü–∏–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        section = []
        section.append("## üîó –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
        section.append("")

        integration_results = self.test_results.get('integration', {})
        if not integration_results:
            section.append("‚ùå –î–∞–Ω–Ω—ã–µ –æ–± –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
            section.append("")
            return section

        # Docker –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
        docker_results = integration_results.get('docker_integration', {})
        if docker_results:
            section.append("### üê≥ Docker –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è")
            section.append("")
            if docker_results.get('success', False):
                total_containers = docker_results.get('total_containers', 0)
                running_containers = docker_results.get('running_containers', 0)
                healthy_containers = docker_results.get('healthy_containers', 0)

                section.append(f"- **–í—Å–µ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:** {total_containers}")
                section.append(f"- **–ó–∞–ø—É—â–µ–Ω–Ω—ã—Ö:** {running_containers}")
                section.append(f"- **–ó–¥–æ—Ä–æ–≤—ã—Ö:** {healthy_containers}")
                section.append(f"- **–ü—Ä–æ—Ü–µ–Ω—Ç –∑–¥–æ—Ä–æ–≤—ã—Ö:** {docker_results.get('container_health_rate', 0):.1f}%")
            else:
                section.append("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ Docker")
            section.append("")

        # Health check —Ü–µ–ø–æ—á–∫–∞
        health_results = integration_results.get('service_health_chain', {})
        if health_results:
            section.append("### üè• Health check —Å–µ—Ä–≤–∏—Å–æ–≤")
            section.append("")
            section.append(f"- **–í—Å–µ–≥–æ —Å–µ—Ä–≤–∏—Å–æ–≤:** {health_results.get('total_services', 0)}")
            section.append(f"- **–ó–¥–æ—Ä–æ–≤—ã—Ö:** {health_results.get('healthy_services', 0)}")
            section.append(f"- **–ü—Ä–æ—Ü–µ–Ω—Ç –∑–¥–æ—Ä–æ–≤—ã—Ö:** {health_results.get('health_percentage', 0):.1f}%")
            section.append("")

        # Nginx –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è
        nginx_results = integration_results.get('nginx_routing', {})
        if nginx_results:
            section.append("### üåê Nginx –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è")
            section.append("")
            section.append(f"- **–í—Å–µ–≥–æ –º–∞—Ä—à—Ä—É—Ç–æ–≤:** {nginx_results.get('total_routes', 0)}")
            section.append(f"- **–£—Å–ø–µ—à–Ω—ã—Ö:** {nginx_results.get('successful_routes', 0)}")
            section.append(f"- **–£—Å–ø–µ—à–Ω–æ—Å—Ç—å:** {nginx_results.get('routing_success_rate', 0):.1f}%")
            section.append("")

        return section

    def _generate_litellm_section(self) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ–∫—Ü–∏–∏ LiteLLM —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        section = []
        section.append("## ü§ñ LiteLLM –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è")
        section.append("")

        litellm_results = self.test_results.get('litellm', {})
        if not litellm_results:
            section.append("‚ùå –î–∞–Ω–Ω—ã–µ –æ LiteLLM —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
            section.append("")
            return section

        # Health check
        health_check = litellm_results.get('health_check', {})
        section.append("### üè• –ó–¥–æ—Ä–æ–≤—å–µ —Å–µ—Ä–≤–∏—Å–∞")
        section.append("")
        if health_check.get('success', False):
            section.append("‚úÖ LiteLLM —Å–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            section.append(f"- **–í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞:** {health_check.get('response_time_ms', 0):.1f}ms")
        else:
            section.append("‚ùå LiteLLM —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            if 'error' in health_check:
                section.append(f"- **–û—à–∏–±–∫–∞:** {health_check['error']}")
        section.append("")

        # –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–µ–π
        models_results = litellm_results.get('models_availability', {})
        if models_results:
            section.append("### üìö –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–µ–π")
            section.append("")
            if models_results.get('success', False):
                total_models = models_results.get('total_models', 0)
                providers = models_results.get('providers', {})

                section.append(f"- **–í—Å–µ–≥–æ –º–æ–¥–µ–ª–µ–π:** {total_models}")
                section.append(f"- **–ü—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤:** {len(providers)}")

                for provider, models in providers.items():
                    section.append(f"  - {provider}: {len(models)} –º–æ–¥–µ–ª–µ–π")
            else:
                section.append("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π")
            section.append("")

        # –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
        performance_results = litellm_results.get('provider_performance', {})
        if performance_results:
            section.append("### ‚ö° –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–µ–π")
            section.append("")

            successful_models = {k: v for k, v in performance_results.items() if v.get('success', False)}

            if successful_models:
                section.append("| –ú–æ–¥–µ–ª—å | –í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞ (ms) | –¢–æ–∫–µ–Ω–æ–≤/—Å–µ–∫ | –£—Å–ø–µ—à–Ω–æ—Å—Ç—å |")
                section.append("|--------|-------------------|-------------|------------|")

                for model, data in successful_models.items():
                    avg_time = data.get('avg_response_time_ms', 0)
                    tokens_per_sec = data.get('tokens_per_second', 0)
                    success_rate = data.get('success_rate', 0) * 100

                    section.append(f"| {model} | {avg_time:.1f} | {tokens_per_sec:.1f} | {success_rate:.1f}% |")
            else:
                section.append("‚ùå –ù–∏ –æ–¥–Ω–∞ –º–æ–¥–µ–ª—å –Ω–µ –ø—Ä–æ—à–ª–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")

            section.append("")

        return section

    def _generate_recommendations(self) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"""
        section = []
        section.append("## üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")
        section.append("")

        recommendations = []

        # –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        ab_results = self.test_results.get('ab_testing', {})
        if ab_results:
            performance_metrics = ab_results.get('performance_metrics', [])
            for metric in performance_metrics:
                if isinstance(metric, dict):
                    service = metric.get('service_name', 'unknown')

                    if metric.get('avg_response_time', 0) > 50:
                        recommendations.append({
                            'priority': 'high',
                            'category': 'performance',
                            'service': service,
                            'issue': f"–í—ã—Å–æ–∫–æ–µ –≤—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞: {metric.get('avg_response_time', 0):.1f}ms",
                            'recommendation': "–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏, –¥–æ–±–∞–≤–∏—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ"
                        })

                    if metric.get('success_rate', 1) < 0.95:
                        recommendations.append({
                            'priority': 'critical',
                            'category': 'reliability',
                            'service': service,
                            'issue': f"–ù–∏–∑–∫–∞—è —É—Å–ø–µ—à–Ω–æ—Å—Ç—å: {metric.get('success_rate', 0)*100:.1f}%",
                            'recommendation': "–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –ø—Ä–∏—á–∏–Ω—ã –æ—à–∏–±–æ–∫, —É–ª—É—á—à–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –∏—Å–∫–ª—é—á–µ–Ω–∏–π"
                        })

        # –ê–Ω–∞–ª–∏–∑ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
        cache_metrics = ab_results.get('cache_metrics', {}) if ab_results else {}
        if cache_metrics:
            if isinstance(cache_metrics, dict):
                hit_rate = cache_metrics.get('hit_rate', 0)
            elif hasattr(cache_metrics, 'hit_rate'):
                hit_rate = getattr(cache_metrics, 'hit_rate', 0)
            else:
                hit_rate = 0

            if hit_rate < 0.90:
                recommendations.append({
                    'priority': 'high',
                    'category': 'caching',
                    'service': 'redis',
                    'issue': f"–ù–∏–∑–∫–∏–π hit rate –∫—ç—à–∞: {hit_rate*100:.1f}%",
                    'recommendation': "–ü–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è, —É–≤–µ–ª–∏—á–∏—Ç—å TTL"
                })

        # –ê–Ω–∞–ª–∏–∑ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
        functional_results = self.test_results.get('functional_web', {})
        inaccessible_services = []
        if functional_results and isinstance(functional_results, dict):
            for service_name, service_data in functional_results.items():
                if isinstance(service_data, dict) and 'accessibility' in service_data:
                    if not service_data['accessibility'].get('accessible', False):
                        inaccessible_services.append(service_name)

        if inaccessible_services:
            recommendations.append({
                'priority': 'critical',
                'category': 'availability',
                'service': ', '.join(inaccessible_services),
                'issue': f"–ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã: {len(inaccessible_services)}",
                'recommendation': "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å–µ—Ä–≤–∏—Å–æ–≤ –∏ —Å–µ—Ç–µ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"
            })

        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
        priority_order = {'critical': 0, 'high': 1, 'medium': 2, 'low': 3}
        recommendations.sort(key=lambda x: priority_order.get(x['priority'], 3))

        # –í—ã–≤–æ–¥ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        if recommendations:
            for i, rec in enumerate(recommendations[:10], 1):  # –¢–æ–ø-10 —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
                priority_icon = {'critical': 'üî¥', 'high': 'üü†', 'medium': 'üü°', 'low': 'üü¢'}.get(rec['priority'], '‚ö™')
                section.append(f"### {i}. {priority_icon} {rec['category'].title()} - {rec['service']}")
                section.append("")
                section.append(f"**–ü—Ä–æ–±–ª–µ–º–∞:** {rec['issue']}")
                section.append(f"**–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:** {rec['recommendation']}")
                section.append(f"**–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:** {rec['priority'].upper()}")
                section.append("")
        else:
            section.append("‚úÖ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º –Ω–µ –≤—ã—è–≤–ª–µ–Ω–æ")
            section.append("")

        return section

    def _generate_conclusion(self) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–∫–ª—é—á–µ–Ω–∏—è"""
        section = []
        section.append("## üìã –ó–∞–∫–ª—é—á–µ–Ω–∏–µ")
        section.append("")

        overall_status = self._calculate_overall_status()

        section.append(f"–ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã Open WebUI Hub –∑–∞–≤–µ—Ä—à–µ–Ω–æ. ")
        section.append(f"–û–±—â–∏–π –±–∞–ª–ª —Å–∏—Å—Ç–µ–º—ã —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç **{overall_status['score']:.1f}/100** ({overall_status['status']}).")
        section.append("")

        # –ö—Ä–∞—Ç–∫–∏–µ –≤—ã–≤–æ–¥—ã –ø–æ –∫–∞–∂–¥–æ–º—É —Ç–∏–ø—É —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        section.append("### üìä –ö—Ä–∞—Ç–∫–∏–µ –≤—ã–≤–æ–¥—ã:")
        section.append("")

        # –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        ab_results = self.test_results.get('ab_testing', {})
        if ab_results:
            section.append("- **–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:** –°–∏—Å—Ç–µ–º–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∏–µ–º–ª–µ–º—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, –Ω–æ —Ç—Ä–µ–±—É–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è")

        # –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
        functional_results = self.test_results.get('functional_web', {})
        if functional_results and isinstance(functional_results, dict):
            accessible_count = sum(1 for data in functional_results.values()
                                 if isinstance(data, dict) and data.get('accessibility', {}).get('accessible', False))
            total_count = len([data for data in functional_results.values()
                             if isinstance(data, dict) and 'accessibility' in data])
            section.append(f"- **–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:** {accessible_count}/{total_count} –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤ –¥–æ—Å—Ç—É–ø–Ω—ã")

        # –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
        integration_results = self.test_results.get('integration', {})
        if integration_results:
            section.append("- **–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è:** –ú–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å—ã –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã —Å—Ç–∞–±–∏–ª—å–Ω—ã")

        # LiteLLM
        litellm_results = self.test_results.get('litellm', {})
        if litellm_results:
            health_ok = litellm_results.get('health_check', {}).get('success', False)
            models_ok = litellm_results.get('models_availability', {}).get('success', False)
            if health_ok and models_ok:
                section.append("- **LiteLLM:** –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç, –º–æ–¥–µ–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã")
            else:
                section.append("- **LiteLLM:** –¢—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è, –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å—é")

        section.append("")
        section.append("### üéØ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        section.append("")
        section.append("1. –£—Å—Ç—Ä–∞–Ω–∏—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º")
        section.append("2. –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–µ–¥–ª–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤")
        section.append("3. –£–ª—É—á—à–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è Redis")
        section.append("4. –ü—Ä–æ–≤–µ—Å—Ç–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ –≤–Ω–µ—Å–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π")
        section.append("")
        section.append("---")
        section.append(f"*–û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ {self.report_timestamp.strftime('%Y-%m-%d %H:%M:%S')}*")

        return section

    def save_report(self, filename: Optional[str] = None) -> str:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        if filename is None:
            timestamp = self.report_timestamp.strftime("%Y%m%d_%H%M%S")
            filename = f"tests/comprehensive_ab_testing_report_{timestamp}.md"

        report_content = self.generate_comprehensive_report()

        with open(filename, 'w', encoding='utf-8') as f:
            f.write(report_content)

        logger.info(f"üìÑ –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {filename}")
        return filename

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Open WebUI Hub")
    print("=" * 70)

    generator = ComprehensiveReportGenerator()

    try:
        # –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        results = generator.load_all_test_results()

        if not any(results.values()):
            print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞")
            return 1

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
        report_file = generator.save_report()

        # –ö—Ä–∞—Ç–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print("\n" + "="*70)
        print("üìã –ö–†–ê–¢–ö–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
        print("="*70)

        for test_type, data in results.items():
            status = "‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ" if data else "‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
            print(f"{test_type.replace('_', ' ').title()}: {status}")

        overall_status = generator._calculate_overall_status()
        print(f"\n–û–±—â–∏–π –±–∞–ª–ª —Å–∏—Å—Ç–µ–º—ã: {overall_status['score']:.1f}/100 ({overall_status['status']})")

        print("="*70)
        print(f"üìÑ –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –æ—Ç—á–µ—Ç: {report_file}")

        return 0

    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return 1

if __name__ == "__main__":
    import sys
    exit_code = main()
    sys.exit(exit_code)
