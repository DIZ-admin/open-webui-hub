#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ Docling —Å–µ—Ä–≤–∏—Å–∞
"""

import requests
import time
import json
from datetime import datetime

def test_docling_health():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è Docling"""
    try:
        response = requests.get("http://localhost:5001/health", timeout=10)
        if response.status_code == 200:
            print("‚úÖ Docling health check: OK")
            return True
        else:
            print(f"‚ùå Docling health check failed: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Docling health check error: {e}")
        return False

def test_openwebui_with_docling():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Open WebUI —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º Docling"""
    print("üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ Open WebUI —Å Docling...")
    
    # –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ Open WebUI –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Docling
    try:
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
        test_content = """–¢–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ Docling
        
–≠—Ç–æ—Ç –¥–æ–∫—É–º–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–≥–æ, —á—Ç–æ:
1. –û—à–∏–±–∫–∞ UnboundLocalError: df_osd –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞
2. –§–∞–π–ª osd.traineddata —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
3. Tesseract OCR —Ä–∞–±–æ—Ç–∞–µ—Ç —Å OSD
4. Docling —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç—ã

–î–∞—Ç–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: 2025-06-21
–°—Ç–∞—Ç—É—Å: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ ‚úÖ"""
        
        with open("test_docling_fixed.txt", "w", encoding="utf-8") as f:
            f.write(test_content)
        
        print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞: {e}")
        return False

def check_docling_logs():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤ Docling –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫"""
    print("üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤ Docling...")
    
    import subprocess
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏ Docling
        result = subprocess.run([
            "docker", "logs", "open-webui-hub-docling-1", "--tail", "20"
        ], capture_output=True, text=True, timeout=10)
        
        if result.returncode == 0:
            logs = result.stdout
            if "UnboundLocalError" in logs:
                print("‚ùå –ù–∞–π–¥–µ–Ω–∞ –æ—à–∏–±–∫–∞ UnboundLocalError –≤ –ª–æ–≥–∞—Ö")
                return False
            elif "osd.traineddata" in logs and "Error opening" in logs:
                print("‚ùå –ù–∞–π–¥–µ–Ω–∞ –æ—à–∏–±–∫–∞ —Å osd.traineddata –≤ –ª–æ–≥–∞—Ö")
                return False
            else:
                print("‚úÖ –õ–æ–≥–∏ Docling —á–∏—Å—Ç—ã–µ, –æ—à–∏–±–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤: {result.stderr}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ–≥–æ–≤: {e}")
        return False

def test_tesseract_osd():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ OSD –≤ Tesseract"""
    print("üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ OSD –≤ Tesseract...")
    
    import subprocess
    try:
        result = subprocess.run([
            "docker", "exec", "open-webui-hub-docling-1", 
            "tesseract", "--list-langs"
        ], capture_output=True, text=True, timeout=10)
        
        if result.returncode == 0:
            langs = result.stdout
            if "osd" in langs:
                print("‚úÖ OSD –¥–æ—Å—Ç—É–ø–µ–Ω –≤ Tesseract")
                return True
            else:
                print("‚ùå OSD –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ —è–∑—ã–∫–æ–≤ Tesseract")
                print(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ —è–∑—ã–∫–∏: {langs}")
                return False
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —è–∑—ã–∫–æ–≤ Tesseract: {result.stderr}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Tesseract: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ Docling —Å–µ—Ä–≤–∏—Å–∞")
    print("=" * 60)
    
    tests = [
        ("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è Docling", test_docling_health),
        ("–ü—Ä–æ–≤–µ—Ä–∫–∞ OSD –≤ Tesseract", test_tesseract_osd),
        ("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤ Docling", check_docling_logs),
        ("–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞", test_openwebui_with_docling),
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        print(f"\nüß™ {test_name}...")
        if test_func():
            passed += 1
        else:
            print(f"‚ùå –¢–µ—Å—Ç '{test_name}' –Ω–µ –ø—Ä–æ—à–µ–ª")
    
    print("\n" + "=" * 60)
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ! Docling –∏—Å–ø—Ä–∞–≤–ª–µ–Ω.")
        return True
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏. –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞.")
        return False

if __name__ == "__main__":
    success = main()
    exit(0 if success else 1)
