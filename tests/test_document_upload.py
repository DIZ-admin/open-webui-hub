#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ Open WebUI Hub
"""

import requests
import json
import time
import os
from datetime import datetime

class DocumentUploadTester:
    def __init__(self):
        self.base_url = "http://localhost:3000"
        self.session = requests.Session()
        self.test_results = {}
        
    def test_file_upload(self, file_path: str, knowledge_base_id: str = None):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞"""
        print(f"üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {file_path}")
        
        if not os.path.exists(file_path):
            print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
            return False
            
        try:
            # –ï—Å–ª–∏ –Ω–µ—Ç knowledge_base_id, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –±–∞–∑—É –∑–Ω–∞–Ω–∏–π
            if not knowledge_base_id:
                knowledge_base_id = self.create_knowledge_base()
                
            if not knowledge_base_id:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –±–∞–∑—É –∑–Ω–∞–Ω–∏–π")
                return False
                
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
            with open(file_path, 'rb') as f:
                files = {'file': (os.path.basename(file_path), f)}
                
                upload_url = f"{self.base_url}/api/v1/knowledge/{knowledge_base_id}/file/add"
                response = self.session.post(upload_url, files=files)
                
                print(f"üì§ –°—Ç–∞—Ç—É—Å –∑–∞–≥—Ä—É–∑–∫–∏: {response.status_code}")
                
                if response.status_code == 200:
                    result = response.json()
                    print(f"‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω: {result}")
                    return True
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {response.status_code} - {response.text}")
                    return False
                    
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ: {e}")
            return False
    
    def create_knowledge_base(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π"""
        print("üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π...")
        
        try:
            create_url = f"{self.base_url}/api/v1/knowledge"
            data = {
                "name": f"Test Knowledge Base {datetime.now().strftime('%Y%m%d_%H%M%S')}",
                "description": "–¢–µ—Å—Ç–æ–≤–∞—è –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"
            }
            
            response = self.session.post(create_url, json=data)
            
            if response.status_code == 200:
                result = response.json()
                kb_id = result.get('id')
                print(f"‚úÖ –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π —Å–æ–∑–¥–∞–Ω–∞: {kb_id}")
                return kb_id
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π: {response.status_code} - {response.text}")
                return None
                
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π: {e}")
            return None
    
    def list_knowledge_bases(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –±–∞–∑ –∑–Ω–∞–Ω–∏–π"""
        try:
            list_url = f"{self.base_url}/api/v1/knowledge"
            response = self.session.get(list_url)
            
            if response.status_code == 200:
                result = response.json()
                print(f"üìã –ù–∞–π–¥–µ–Ω–æ –±–∞–∑ –∑–Ω–∞–Ω–∏–π: {len(result)}")
                return result
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞: {response.status_code}")
                return []
                
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞: {e}")
            return []
    
    def test_search(self, query: str, knowledge_base_id: str):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π"""
        print(f"üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞: '{query}'")
        
        try:
            search_url = f"{self.base_url}/api/v1/knowledge/{knowledge_base_id}/search"
            data = {"query": query}
            
            response = self.session.post(search_url, json=data)
            
            if response.status_code == 200:
                result = response.json()
                print(f"‚úÖ –ü–æ–∏—Å–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω, –Ω–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(result.get('results', []))}")
                return result
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {response.status_code} - {response.text}")
                return None
                
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {e}")
            return None
    
    def run_comprehensive_test(self):
        """–ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"""
        print("üöÄ –ù–∞—á–∞–ª–æ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
        print("=" * 60)
        
        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API
        try:
            health_response = self.session.get(f"{self.base_url}/")
            if health_response.status_code != 200:
                print("‚ùå Open WebUI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return False
            print("‚úÖ Open WebUI –¥–æ—Å—Ç—É–ø–µ–Ω")
        except:
            print("‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Open WebUI")
            return False
        
        # 2. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –±–∞–∑ –∑–Ω–∞–Ω–∏–π
        knowledge_bases = self.list_knowledge_bases()
        
        # 3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
        test_file = "test_document.txt"
        if os.path.exists(test_file):
            success = self.test_file_upload(test_file)
            if success:
                print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
            else:
                print("‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å")
        else:
            print(f"‚ùå –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {test_file}")
        
        print("=" * 60)
        print("üèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

def main():
    tester = DocumentUploadTester()
    tester.run_comprehensive_test()

if __name__ == "__main__":
    main()
