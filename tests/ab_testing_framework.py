#!/usr/bin/env python3
"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π A/B Testing Framework –¥–ª—è Open WebUI Hub
–ü—Ä–æ–≤–æ–¥–∏—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
"""

import asyncio
import aiohttp
import time
import json
import statistics
import psutil
import docker
import redis
import logging
import sys
from datetime import datetime
from typing import Dict, List, Any, Optional
from dataclasses import dataclass, asdict

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('tests/ab_testing_results.log'),
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)

@dataclass
class TestConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    # –ë–∞–∑–æ–≤—ã–µ URL —Å–µ—Ä–≤–∏—Å–æ–≤
    hub_api_url: str = "http://localhost:5003"
    litellm_api_url: str = "http://localhost:4000"
    nginx_url: str = "http://localhost:80"
    redis_url: str = "redis://localhost:6379"
    
    # –¶–µ–ª–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    target_response_time_ms: int = 50
    target_cache_hit_rate: float = 0.90
    target_cpu_usage: float = 0.05  # 5%
    target_memory_usage_mb: int = 100
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    concurrent_requests: int = 10
    test_duration_seconds: int = 60
    warmup_requests: int = 5
    
    # –¢–∞–π–º–∞—É—Ç—ã
    request_timeout: int = 10
    health_check_timeout: int = 5

@dataclass
class PerformanceMetrics:
    """–ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    service_name: str
    endpoint: str
    response_times: List[float]
    success_rate: float
    error_count: int
    total_requests: int
    avg_response_time: float
    p95_response_time: float
    p99_response_time: float
    cpu_usage: float
    memory_usage_mb: float
    timestamp: datetime

@dataclass
class CacheMetrics:
    """–ú–µ—Ç—Ä–∏–∫–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è Redis"""
    hit_rate: float
    miss_rate: float
    total_commands: int
    used_memory_mb: float
    connected_clients: int
    operations_per_second: float
    timestamp: datetime

@dataclass
class ServiceHealthMetrics:
    """–ú–µ—Ç—Ä–∏–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
    service_name: str
    is_healthy: bool
    response_time_ms: float
    status_code: int
    error_message: Optional[str]
    container_status: str
    timestamp: datetime

class ABTestingFramework:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –¥–ª—è A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    def __init__(self, config: TestConfig):
        self.config = config
        self.docker_client = None
        self.redis_client = None
        self.results: Dict[str, Any] = {}
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
        self._init_clients()
    
    def _init_clients(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤ Docker –∏ Redis"""
        try:
            self.docker_client = docker.from_env()
            logger.info("‚úÖ Docker client –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Docker: {e}")
        
        try:
            self.redis_client = redis.from_url(self.config.redis_url)
            self.redis_client.ping()
            logger.info("‚úÖ Redis client –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Redis: {e}")
    
    async def run_comprehensive_tests(self) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        logger.info("üöÄ –ù–∞—á–∞–ª–æ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Open WebUI Hub")
        start_time = datetime.now()
        
        try:
            # 1. –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã
            logger.info("üìã –≠—Ç–∞–ø 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã")
            health_results = await self._check_system_health()
            
            # 2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤
            logger.info("‚ö° –≠—Ç–∞–ø 2: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤")
            performance_results = await self._test_microservices_performance()
            
            # 3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è Redis
            logger.info("üîÑ –≠—Ç–∞–ø 3: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è")
            cache_results = await self._test_redis_caching()
            
            # 4. –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            logger.info("üîó –≠—Ç–∞–ø 4: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
            integration_results = await self._test_service_integration()
            
            # 5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ LiteLLM
            logger.info("ü§ñ –≠—Ç–∞–ø 5: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ LiteLLM –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏")
            llm_results = await self._test_litellm_performance()
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            self.results['health_check'] = health_results
            self.results['performance_metrics'] = performance_results
            self.results['cache_metrics'] = cache_results
            self.results['integration_results'] = integration_results
            self.results['llm_performance'] = llm_results
            self.results['test_duration'] = (datetime.now() - start_time).total_seconds()
            self.results['timestamp'] = start_time.isoformat()
            
            logger.info("‚úÖ –ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
            return self.results
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            raise
    
    async def _check_system_health(self) -> Dict[str, ServiceHealthMetrics]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
        services = {
            'hub': f"{self.config.hub_api_url}/api/health",
            'litellm': f"{self.config.litellm_api_url}/health",
            'nginx': f"{self.config.nginx_url}",
            'redis': None  # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è Redis
        }
        
        health_results = {}
        
        async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=self.config.health_check_timeout)) as session:
            for service_name, health_url in services.items():
                if service_name == 'redis':
                    health_results[service_name] = await self._check_redis_health()
                else:
                    health_results[service_name] = await self._check_http_health(session, service_name, health_url)
        
        return health_results
    
    async def _check_http_health(self, session: aiohttp.ClientSession, service_name: str, health_url: str) -> ServiceHealthMetrics:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ HTTP –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
        start_time = time.time()
        
        try:
            async with session.get(health_url) as response:
                response_time = (time.time() - start_time) * 1000
                
                # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
                container_status = self._get_container_status(service_name)
                
                return ServiceHealthMetrics(
                    service_name=service_name,
                    is_healthy=response.status == 200,
                    response_time_ms=response_time,
                    status_code=response.status,
                    error_message=None,
                    container_status=container_status,
                    timestamp=datetime.now()
                )
        except Exception as e:
            return ServiceHealthMetrics(
                service_name=service_name,
                is_healthy=False,
                response_time_ms=-1,
                status_code=-1,
                error_message=str(e),
                container_status=self._get_container_status(service_name),
                timestamp=datetime.now()
            )
    
    async def _check_redis_health(self) -> ServiceHealthMetrics:
        """–°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è Redis"""
        start_time = time.time()
        
        try:
            if self.redis_client:
                self.redis_client.ping()
                response_time = (time.time() - start_time) * 1000
                
                return ServiceHealthMetrics(
                    service_name='redis',
                    is_healthy=True,
                    response_time_ms=response_time,
                    status_code=200,
                    error_message=None,
                    container_status=self._get_container_status('redis'),
                    timestamp=datetime.now()
                )
        except Exception as e:
            pass

        return ServiceHealthMetrics(
            service_name='redis',
            is_healthy=False,
            response_time_ms=-1,
            status_code=-1,
            error_message="Redis connection failed",
            container_status=self._get_container_status('redis'),
            timestamp=datetime.now()
        )
    
    def _get_container_status(self, service_name: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"""
        if not self.docker_client:
            return "unknown"
        
        try:
            # –ü–æ–∏—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –ø–æ –∏–º–µ–Ω–∏
            container_name = f"open-webui-hub-{service_name}-1"
            container = self.docker_client.containers.get(container_name)
            return container.status
        except Exception:
            return "not_found"
    
    def save_results_to_file(self, filename: Optional[str] = None):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ —Ñ–∞–π–ª"""
        if filename is None:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"tests/ab_testing_results_{timestamp}.json"
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è dataclass –æ–±—ä–µ–∫—Ç–æ–≤ –≤ —Å–ª–æ–≤–∞—Ä–∏
        serializable_results = self._make_serializable(self.results)
        
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(serializable_results, f, indent=2, ensure_ascii=False, default=str)
        
        logger.info(f"üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {filename}")
    
    def _make_serializable(self, obj):
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ –≤ JSON-—Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç"""
        if isinstance(obj, dict):
            return {k: self._make_serializable(v) for k, v in obj.items()}
        elif isinstance(obj, list):
            return [self._make_serializable(item) for item in obj]
        elif hasattr(obj, '__dict__'):
            return asdict(obj) if hasattr(obj, '__dataclass_fields__') else obj.__dict__
        else:
            return obj

    async def _test_microservices_performance(self) -> List[PerformanceMetrics]:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤"""
        endpoints = [
            ('hub', f"{self.config.hub_api_url}/api/health"),
            ('hub', f"{self.config.hub_api_url}/api/services"),
            ('hub', f"{self.config.hub_api_url}/api/metrics"),
            ('hub', f"{self.config.hub_api_url}/api/architecture"),
            ('litellm', f"{self.config.litellm_api_url}/health"),
        ]

        performance_results = []

        for service_name, endpoint_url in endpoints:
            logger.info(f"üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {service_name} - {endpoint_url}")

            # Warmup –∑–∞–ø—Ä–æ—Å—ã
            await self._warmup_endpoint(endpoint_url)

            # –û—Å–Ω–æ–≤–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            metrics = await self._load_test_endpoint(service_name, endpoint_url)
            performance_results.append(metrics)

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ü–µ–ª–µ–≤—ã–º –º–µ—Ç—Ä–∏–∫–∞–º
            self._validate_performance_targets(metrics)

        return performance_results

    async def _warmup_endpoint(self, endpoint_url: str):
        """–ü—Ä–æ–≥—Ä–µ–≤ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        async with aiohttp.ClientSession() as session:
            for _ in range(self.config.warmup_requests):
                try:
                    async with session.get(endpoint_url, timeout=aiohttp.ClientTimeout(total=self.config.request_timeout)):
                        pass
                except Exception:
                    pass

    async def _load_test_endpoint(self, service_name: str, endpoint_url: str) -> PerformanceMetrics:
        """–ù–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞"""
        response_times = []
        error_count = 0
        total_requests = 0

        # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        initial_cpu = psutil.cpu_percent(interval=1)
        initial_memory = psutil.virtual_memory().used / 1024 / 1024

        start_time = time.time()

        async with aiohttp.ClientSession() as session:
            while time.time() - start_time < self.config.test_duration_seconds:
                tasks = []

                # –°–æ–∑–¥–∞–Ω–∏–µ –ø—É–ª–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
                for _ in range(self.config.concurrent_requests):
                    task = self._single_request(session, endpoint_url)
                    tasks.append(task)

                # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤
                results = await asyncio.gather(*tasks, return_exceptions=True)

                for result in results:
                    total_requests += 1
                    if isinstance(result, Exception):
                        error_count += 1
                    else:
                        response_times.append(result)

                # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –ø—É–ª–∞–º–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
                await asyncio.sleep(0.1)

        # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        final_cpu = psutil.cpu_percent(interval=1)
        final_memory = psutil.virtual_memory().used / 1024 / 1024

        # –†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫
        success_rate = (total_requests - error_count) / total_requests if total_requests > 0 else 0
        avg_response_time = statistics.mean(response_times) if response_times else 0
        p95_response_time = statistics.quantiles(response_times, n=20)[18] if len(response_times) >= 20 else 0
        p99_response_time = statistics.quantiles(response_times, n=100)[98] if len(response_times) >= 100 else 0

        return PerformanceMetrics(
            service_name=service_name,
            endpoint=endpoint_url,
            response_times=response_times,
            success_rate=success_rate,
            error_count=error_count,
            total_requests=total_requests,
            avg_response_time=avg_response_time,
            p95_response_time=p95_response_time,
            p99_response_time=p99_response_time,
            cpu_usage=max(final_cpu - initial_cpu, 0),
            memory_usage_mb=max(final_memory - initial_memory, 0),
            timestamp=datetime.now()
        )

    async def _single_request(self, session: aiohttp.ClientSession, url: str) -> float:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ HTTP –∑–∞–ø—Ä–æ—Å–∞ —Å –∏–∑–º–µ—Ä–µ–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏"""
        start_time = time.time()
        try:
            async with session.get(url, timeout=aiohttp.ClientTimeout(total=self.config.request_timeout)) as response:
                await response.read()  # –ü–æ–ª–Ω–æ–µ —á—Ç–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
                return (time.time() - start_time) * 1000  # –í—Ä–µ–º—è –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
        except Exception as e:
            raise e

    def _validate_performance_targets(self, metrics: PerformanceMetrics):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ü–µ–ª–µ–≤—ã–º –º–µ—Ç—Ä–∏–∫–∞–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        issues = []

        if metrics.avg_response_time > self.config.target_response_time_ms:
            issues.append(f"–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞ {metrics.avg_response_time:.1f}ms –ø—Ä–µ–≤—ã—à–∞–µ—Ç —Ü–µ–ª–µ–≤–æ–µ {self.config.target_response_time_ms}ms")

        if metrics.success_rate < 0.95:  # 95% —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
            issues.append(f"–£—Å–ø–µ—à–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–æ–≤ {metrics.success_rate:.1%} –Ω–∏–∂–µ 95%")

        if metrics.cpu_usage > self.config.target_cpu_usage:
            issues.append(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ CPU {metrics.cpu_usage:.1%} –ø—Ä–µ–≤—ã—à–∞–µ—Ç —Ü–µ–ª–µ–≤–æ–µ {self.config.target_cpu_usage:.1%}")

        if metrics.memory_usage_mb > self.config.target_memory_usage_mb:
            issues.append(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ {metrics.memory_usage_mb:.1f}MB –ø—Ä–µ–≤—ã—à–∞–µ—Ç —Ü–µ–ª–µ–≤–æ–µ {self.config.target_memory_usage_mb}MB")

        if issues:
            logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è {metrics.service_name}:")
            for issue in issues:
                logger.warning(f"   - {issue}")
        else:
            logger.info(f"‚úÖ {metrics.service_name} —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ü–µ–ª–µ–≤—ã–º –º–µ—Ç—Ä–∏–∫–∞–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")

    async def _test_redis_caching(self) -> CacheMetrics:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è Redis"""
        if not self.redis_client:
            logger.error("‚ùå Redis client –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è")
            return CacheMetrics(0, 0, 0, 0, 0, 0, datetime.now())

        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ Redis
            initial_info = await self.redis_client.info()
            initial_hits = initial_info.get('keyspace_hits', 0)
            initial_misses = initial_info.get('keyspace_misses', 0)
            initial_commands = initial_info.get('total_commands_processed', 0)

            # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ Hub API
            logger.info("üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ Hub API...")

            # –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∫ –æ–¥–Ω–∏–º –∏ —Ç–µ–º –∂–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞–º –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
            test_endpoints = [
                f"{self.config.hub_api_url}/api/services",
                f"{self.config.hub_api_url}/api/metrics",
                f"{self.config.hub_api_url}/api/architecture"
            ]

            # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∫—ç—à–∞
            async with aiohttp.ClientSession() as session:
                for endpoint in test_endpoints:
                    for _ in range(10):  # 10 –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –∫–∞–∂–¥–æ–º—É —ç–Ω–¥–ø–æ–∏–Ω—Ç—É
                        try:
                            async with session.get(endpoint, timeout=aiohttp.ClientTimeout(total=5)):
                                pass
                        except Exception:
                            pass
                        await asyncio.sleep(0.1)

            # –û–∂–∏–¥–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            await asyncio.sleep(2)

            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            final_info = await self.redis_client.info()
            final_hits = final_info.get('keyspace_hits', 0)
            final_misses = final_info.get('keyspace_misses', 0)
            final_commands = final_info.get('total_commands_processed', 0)

            # –†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
            hits_diff = final_hits - initial_hits
            misses_diff = final_misses - initial_misses
            total_cache_operations = hits_diff + misses_diff

            hit_rate = hits_diff / total_cache_operations if total_cache_operations > 0 else 0
            miss_rate = misses_diff / total_cache_operations if total_cache_operations > 0 else 0

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ Redis
            used_memory_mb = final_info.get('used_memory', 0) / 1024 / 1024
            connected_clients = final_info.get('connected_clients', 0)
            commands_diff = final_commands - initial_commands
            ops_per_second = commands_diff / 60  # –ó–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –º–∏–Ω—É—Ç—É

            cache_metrics = CacheMetrics(
                hit_rate=hit_rate,
                miss_rate=miss_rate,
                total_commands=commands_diff,
                used_memory_mb=used_memory_mb,
                connected_clients=connected_clients,
                operations_per_second=ops_per_second,
                timestamp=datetime.now()
            )

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–µ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
            if hit_rate < self.config.target_cache_hit_rate:
                logger.warning(f"‚ö†Ô∏è Hit rate –∫—ç—à–∞ {hit_rate:.1%} –Ω–∏–∂–µ —Ü–µ–ª–µ–≤–æ–≥–æ {self.config.target_cache_hit_rate:.1%}")
            else:
                logger.info(f"‚úÖ Hit rate –∫—ç—à–∞ {hit_rate:.1%} —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ü–µ–ª–µ–≤–æ–º—É –ø–æ–∫–∞–∑–∞—Ç–µ–ª—é")

            return cache_metrics

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Redis –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            return CacheMetrics(0, 0, 0, 0, 0, 0, datetime.now())

    async def _test_service_integration(self) -> Dict[str, Any]:
        """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤"""
        integration_results = {
            'nginx_routing': await self._test_nginx_routing(),
            'service_discovery': await self._test_service_discovery(),
            'health_checks': await self._test_health_check_chain(),
            'docker_integration': await self._test_docker_integration()
        }

        return integration_results

    async def _test_nginx_routing(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Nginx"""
        nginx_tests = {
            'hub_route': f"{self.config.nginx_url}/hub",
            'api_route': f"{self.config.nginx_url}/api/hub/health"
        }

        results = {}

        async with aiohttp.ClientSession() as session:
            for route_name, url in nginx_tests.items():
                try:
                    start_time = time.time()
                    async with session.get(url, timeout=aiohttp.ClientTimeout(total=10)) as response:
                        response_time = (time.time() - start_time) * 1000

                        results[route_name] = {
                            'status_code': response.status,
                            'response_time_ms': response_time,
                            'success': response.status in [200, 301, 302],
                            'headers': dict(response.headers)
                        }
                except Exception as e:
                    results[route_name] = {
                        'status_code': -1,
                        'response_time_ms': -1,
                        'success': False,
                        'error': str(e)
                    }

        return results

    async def _test_service_discovery(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ service discovery"""
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(f"{self.config.hub_api_url}/api/discovery",
                                     timeout=aiohttp.ClientTimeout(total=10)) as response:
                    if response.status == 200:
                        discovery_data = await response.json()
                        return {
                            'success': True,
                            'discovered_services': len(discovery_data.get('services', [])),
                            'data': discovery_data
                        }
                    else:
                        return {
                            'success': False,
                            'status_code': response.status,
                            'error': 'Service discovery endpoint failed'
                        }
        except Exception as e:
            return {
                'success': False,
                'error': str(e)
            }

    async def _test_health_check_chain(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–ø–æ—á–∫–∏ health check –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
        health_chain_results = {}

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ health check —á–µ—Ä–µ–∑ Hub API
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(f"{self.config.hub_api_url}/api/services",
                                     timeout=aiohttp.ClientTimeout(total=15)) as response:
                    if response.status == 200:
                        services_data = await response.json()

                        healthy_count = 0
                        total_count = len(services_data.get('services', []))

                        for service in services_data.get('services', []):
                            if service.get('status') == 'Production Ready':
                                healthy_count += 1

                        health_chain_results = {
                            'success': True,
                            'total_services': total_count,
                            'healthy_services': healthy_count,
                            'health_percentage': (healthy_count / total_count * 100) if total_count > 0 else 0,
                            'services_detail': services_data.get('services', [])
                        }
                    else:
                        health_chain_results = {
                            'success': False,
                            'error': f'Health check chain failed with status {response.status}'
                        }
        except Exception as e:
            health_chain_results = {
                'success': False,
                'error': str(e)
            }

        return health_chain_results

    async def _test_docker_integration(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Docker"""
        if not self.docker_client:
            return {
                'success': False,
                'error': 'Docker client –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'
            }

        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ Open WebUI Hub
            containers = self.docker_client.containers.list(all=True)
            hub_containers = [c for c in containers if 'open-webui-hub' in c.name]

            container_stats = {}
            for container in hub_containers:
                try:
                    stats = container.stats(stream=False)

                    # –†–∞—Å—á–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è CPU
                    cpu_delta = stats['cpu_stats']['cpu_usage']['total_usage'] - \
                               stats['precpu_stats']['cpu_usage']['total_usage']
                    system_delta = stats['cpu_stats']['system_cpu_usage'] - \
                                  stats['precpu_stats']['system_cpu_usage']
                    cpu_percent = (cpu_delta / system_delta) * 100.0 if system_delta > 0 else 0

                    # –†–∞—Å—á–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏
                    memory_usage = stats['memory_stats']['usage']
                    memory_limit = stats['memory_stats']['limit']
                    memory_percent = (memory_usage / memory_limit) * 100.0 if memory_limit > 0 else 0

                    container_stats[container.name] = {
                        'status': container.status,
                        'cpu_percent': cpu_percent,
                        'memory_usage_mb': memory_usage / 1024 / 1024,
                        'memory_percent': memory_percent,
                        'network_rx_bytes': stats.get('networks', {}).get('bridge', {}).get('rx_bytes', 0),
                        'network_tx_bytes': stats.get('networks', {}).get('bridge', {}).get('tx_bytes', 0)
                    }
                except Exception as e:
                    container_stats[container.name] = {
                        'status': container.status,
                        'error': str(e)
                    }

            return {
                'success': True,
                'total_containers': len(hub_containers),
                'running_containers': len([c for c in hub_containers if c.status == 'running']),
                'container_stats': container_stats
            }

        except Exception as e:
            return {
                'success': False,
                'error': str(e)
            }

    async def _test_litellm_performance(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ LiteLLM –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
        litellm_results = {
            'health_check': await self._test_litellm_health(),
            'model_listing': await self._test_litellm_models(),
            'provider_performance': await self._test_llm_providers(),
            'fallback_mechanism': await self._test_llm_fallback()
        }

        return litellm_results

    async def _test_litellm_health(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è LiteLLM —Å–µ—Ä–≤–∏—Å–∞"""
        try:
            async with aiohttp.ClientSession() as session:
                start_time = time.time()
                async with session.get(f"{self.config.litellm_api_url}/health",
                                     timeout=aiohttp.ClientTimeout(total=10)) as response:
                    response_time = (time.time() - start_time) * 1000

                    if response.status == 200:
                        health_data = await response.json()
                        return {
                            'success': True,
                            'response_time_ms': response_time,
                            'status': health_data.get('status', 'unknown'),
                            'data': health_data
                        }
                    else:
                        return {
                            'success': False,
                            'status_code': response.status,
                            'response_time_ms': response_time
                        }
        except Exception as e:
            return {
                'success': False,
                'error': str(e)
            }

    async def _test_litellm_models(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π LiteLLM"""
        try:
            async with aiohttp.ClientSession() as session:
                headers = {'Authorization': 'Bearer sk-1234567890abcdef'}

                start_time = time.time()
                async with session.get(f"{self.config.litellm_api_url}/v1/models",
                                     headers=headers,
                                     timeout=aiohttp.ClientTimeout(total=15)) as response:
                    response_time = (time.time() - start_time) * 1000

                    if response.status == 200:
                        models_data = await response.json()
                        models = models_data.get('data', [])

                        return {
                            'success': True,
                            'response_time_ms': response_time,
                            'total_models': len(models),
                            'models': [model.get('id', 'unknown') for model in models],
                            'providers': list(set([model.get('owned_by', 'unknown') for model in models]))
                        }
                    else:
                        return {
                            'success': False,
                            'status_code': response.status,
                            'response_time_ms': response_time
                        }
        except Exception as e:
            return {
                'success': False,
                'error': str(e)
            }

    async def _test_llm_providers(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤"""
        providers_to_test = [
            {'name': 'ollama', 'model': 'llama3'},
            {'name': 'ollama', 'model': 'codellama'}
        ]

        provider_results = {}

        for provider in providers_to_test:
            provider_key = f"{provider['name']}_{provider['model']}"

            try:
                result = await self._test_single_llm_provider(provider['model'])
                provider_results[provider_key] = result
            except Exception as e:
                provider_results[provider_key] = {
                    'success': False,
                    'error': str(e)
                }

        return provider_results

    async def _test_single_llm_provider(self, model: str) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–≥–æ LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞"""
        test_prompt = "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?"

        try:
            async with aiohttp.ClientSession() as session:
                headers = {
                    'Authorization': 'Bearer sk-1234567890abcdef',
                    'Content-Type': 'application/json'
                }

                payload = {
                    'model': model,
                    'messages': [{'role': 'user', 'content': test_prompt}],
                    'max_tokens': 50,
                    'temperature': 0.7
                }

                start_time = time.time()
                async with session.post(f"{self.config.litellm_api_url}/v1/chat/completions",
                                      headers=headers,
                                      json=payload,
                                      timeout=aiohttp.ClientTimeout(total=30)) as response:
                    response_time = (time.time() - start_time) * 1000

                    if response.status == 200:
                        response_data = await response.json()

                        return {
                            'success': True,
                            'response_time_ms': response_time,
                            'model': model,
                            'tokens_generated': response_data.get('usage', {}).get('completion_tokens', 0),
                            'total_tokens': response_data.get('usage', {}).get('total_tokens', 0),
                            'response_preview': response_data.get('choices', [{}])[0].get('message', {}).get('content', '')[:100]
                        }
                    else:
                        error_text = await response.text()
                        return {
                            'success': False,
                            'status_code': response.status,
                            'response_time_ms': response_time,
                            'error': error_text
                        }
        except Exception as e:
            return {
                'success': False,
                'error': str(e)
            }

    async def _test_llm_fallback(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ fallback –º–µ—Ö–∞–Ω–∏–∑–º–æ–≤ –º–µ–∂–¥—É –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º–∏"""
        # –¢–µ—Å—Ç —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –º–æ–¥–µ–ª—å—é –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ fallback
        try:
            result = await self._test_single_llm_provider('nonexistent-model')

            return {
                'fallback_tested': True,
                'fallback_success': result.get('success', False),
                'fallback_details': result
            }
        except Exception as e:
            return {
                'fallback_tested': True,
                'fallback_success': False,
                'error': str(e)
            }

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    config = TestConfig()
    framework = ABTestingFramework(config)
    
    try:
        results = await framework.run_comprehensive_tests()
        framework.save_results_to_file()
        
        # –ö—Ä–∞—Ç–∫–∏–π –æ—Ç—á–µ—Ç
        print("\n" + "="*60)
        print("üìä –ö–†–ê–¢–ö–ò–ô –û–¢–ß–ï–¢ A/B –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        print("="*60)
        
        # –ó–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã
        if 'health_check' in results:
            healthy_services = sum(1 for metrics in results['health_check'].values() 
                                 if hasattr(metrics, 'is_healthy') and metrics.is_healthy)
            total_services = len(results['health_check'])
            print(f"üè• –ó–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã: {healthy_services}/{total_services} —Å–µ—Ä–≤–∏—Å–æ–≤ –∑–¥–æ—Ä–æ–≤—ã")
        
        print(f"‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {results.get('test_duration', 0):.1f} —Å–µ–∫—É–Ω–¥")
        print("="*60)
        
        return 0
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return 1

if __name__ == "__main__":
    exit_code = asyncio.run(main())
    sys.exit(exit_code)
